%% Commutativity for addition
%%
%% We turn the type nat into a predicate so that we can induct on it.

Theorem add_base : forall N, {nat N} -> {add N z N}.
induction on 1. intros. case H1. search.
  apply IH to H2. search.

Theorem add_step : forall A B C, {add A B C} -> {add A (s B) (s C)}.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem add_comm : forall A B C, {nat B} -> {add A B C} -> {add B A C}.
induction on 2. intros. case H2.
  apply add_base to H1. search.
  apply IH to H1 H3. apply add_step to H4. search.
