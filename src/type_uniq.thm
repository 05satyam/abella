Def ctx nil.
Def nabla x, ctx (typeof x T :: L) :-
      (forall S, member (typeof x S) L -> false),
      ctx L.

Theorem uniq : forall L E T1 T2,
  ctx L -> member (typeof E T1) L -> member (typeof E T2) L -> T1 = T2.
induction on 1. intros. case H1.
  case H2.
  case H2.
    case H3.
      search.
      apply H4 to H6. case H7.
    case H3.
      apply H4 to H6. case H7.
      apply IH to H5 H6 H7. search.

Theorem no_abs : forall L R S T,
  ctx L -> member (typeof (abs S R) T) L -> false.
induction on 1. intros. case H1.
  case H2.
  case H2.
    apply IH to H4 H5. search.
    
Theorem no_app : forall L M N T,
  ctx L -> member (typeof (app M N) T) L -> false.
induction on 1. intros. case H1.
  case H2.
  case H2.
    apply IH to H4 H5. search.
    
Theorem det_typeof : forall L E T1 T2,
  ctx L -> {L |- typeof E T1} -> {L |- typeof E T2} -> T1 = T2.
induction on 2. intros. case H2.
  case H3.
    apply uniq to H1 H4 H5. search.
    apply no_abs to H1 H4. case H6.
    apply no_app to H1 H4. case H7.
  case H3.
    apply no_abs to H1 H5. case H6.
    apply IH to _ H4 H5. case H6. search.
  case H3.
    apply no_app to H1 H6. case H7.
    apply IH to H1 H4 H6.
      case H8. search.
