Def halts T :- exists V, {nstep T V} /\ {value V}.

Def reduce top T :- {typeof T top}, halts T.
Def reduce (arrow A B) T :-
  {typeof T (arrow A B)},
  halts T,
  (forall S, reduce A S -> reduce B (app T S)).

Theorem reduce_halts : forall A T, reduce A T -> halts T.
intros. case H1.
  search.
  search.

Theorem halt_step_forward : forall S T,
  halts S -> {step S T} -> halts T.
skip.

Theorem halt_step_backward : forall S T,
  halts T -> {step S T} -> halts S.
skip.

Theorem typeof_step_forward : forall S T A,
  {typeof S A} -> {step S T} -> {typeof T A}.
induction on 2. intros. case H2.
  case H1. apply IH to H4 H3. search.
  case H1. apply IH to H6 H4. search.
  case H1. case H4.
    inst H6 with n1 = M.
      cut H7 with H5. search.

Theorem reduce_step_forward : forall R T C,
  {type C} -> {typeof R C} -> {step R T} -> reduce C R -> reduce C T.
induction on 1. intros. case H1.
  case H4.
    apply halt_step_forward to H6 H3.
      apply typeof_step_forward to H2 H3.
        search.
  case H4. unfold.
    apply typeof_step_forward to H2 H3. search.
    apply halt_step_forward to H8 H3. search.
    intros. apply H9 to H10.
      apply IH to H6 _ _ H11.
        case H11. search. search.
        search.

Theorem reduce_step_backward : forall R T C,
  {type C} -> {typeof R C} -> {step R T} -> reduce C T -> reduce C R.
induction on 1. intros. case H1.
  case H4.
    apply halt_step_backward to H6 H3.
      apply typeof_step_forward to H2 H3.
        search.
  case H4. unfold.
    search.
    apply halt_step_backward to H8 H3. search.
    intros. apply H9 to H10.
      apply IH to H6 _ _ H11.
        case H10. search. search.
        search.
