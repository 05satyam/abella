################################################
# OCaml Flags
#

OCAML_OTHER_LIBS = unix
OCAMLINCLUDES += $(dir ext)
BYTE_ENABLED = true

OUNIT = $(file ext/oUnit)

.SUBDIRS: ext
    if $(file-exists OMakefile)
       include OMakefile

################################################
# Generated files
#
# Workaround for the fact that ocamldep does not pay attention to .mll
# and .mly files.
#
OCamlGeneratedFiles(parser.ml lexer.ml)

################################################
# Build an OCaml program
#

FILES[] =
    term
    unify
    lppterm
    parser
    lexer
    tactics
    prover
    context
    types
    extensions

MAIN = main

TEST_FILES[] =
    test_helper
    $(rootname $(find . -name *_test.ml))
    test

TEST = unit_test

.PHONY: test
test: $(OCamlProgram $(TEST), $(OUNIT) $(FILES) $(TEST_FILES))
    ./$(TEST) -verbose

.PHONY: lpp
lpp: $(OCamlProgram lpp, $(FILES) $(MAIN))

.PHONY: clean
clean:
   rm $(filter-proper-targets $(ls R, .))

THM = normal
.PHONY: $(THM)
$(THM): $(THM).mod $(THM).thm lpp$(EXE)
    ./lpp $(THM).mod < $(THM).thm

THM_FILES[] = $(rootname $(find . -name *.thm))
.PHONY: theorems
theorems: lpp$(EXE) $(addsuffix .thm, $(THM_FILES)) \
                    $(addsuffix .mod, $(THM_FILES))
    foreach(thm, $(THM_FILES))
        ./lpp $(thm).mod -f $(thm).thm
