Clean up freshness in tactics, case, and intros, apply_forall
  All freshness code should take a support and a used argument?
  
Clean up case analysis code

Update used when introducing variables in search

Do support raising for term backchaining in search

Using apply forall should pick new names for the introduced logic
  variables, right?

Merge lppterm exists forall nabla into a single constructor?

Add tests for apply_forall to nabla
  Rename apply_forall and related tests to something better
  Add tests for apply_forall with support?

Dale's copy example

Cut elimination with forall quantifier?

A n = B is still picking a bad name

After Dale
==========
If not going to use timestamps, remove them from the system?

Future
======

Used variables in unify should use the used variables from the prover
  
Reserve nXXX for nominals and allow parsing like that?

Check that TODO in unify.ml is sound

Prove that normal and non-normal are non-overlapping

Add more bedwyr style searching?
  Watch timestamps more closely?
  Change not (try_left_unify ...) so unification errors (not failures)
    do not result in success

Add unification on lppterms?
  Then add another case to lppterm search

Clarify failure vs error in unification

Display new hypotheses in future subgoals (subgoal 2 is : {...} -> ...)
  
Clean up unify tests (exceptions, pprint)

Case analysis on lg predicates should work differently than lp predicates

Do we have to consider logic variables in the context during search?
How does object cut work with contexts?

Add 'and' ?
  Would pollute namespace :-/

Fix rigid_path_check

Add unification over lppterms?
  If so then simplify search, case, and apply_forall

Make omake target that checks all thm files with their mod files

Make omakefile target for any mod/thm combination

Think about timestamps in the bedwyr style searching

Larger or longer term issues
============================
Remove duplication between case analysis and searching

Fix all substitution capture issues with replace_lppterm_vars
      "Replace should not capture exists variables" >::
        (fun () ->
           let t = exists ["A"] b in
           let t' = replace_lppterm_vars [("B", var_a)] t in
             assert_pprint_equal "exists A', {A}" t') ;

Use type information from sig files?

Seperate parsers more?

Change OMakefile so exceptions print full stack trace? Is there a way
  to integrate this with OUnit?

Add a show_lemmas command
Add 'abort'

Add warning if using a capital name without it appearing in forall
  e.g. forall A, {rev A B} -> {rev B A}. should warn about B.
