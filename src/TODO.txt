Change the handling of contexts so that we don't need "with A = A" in
ded

How to deal with mutual induction on specification judgments like in
focus examples

Coinduction followed by induction would allow hypotheses with @ on
them. What does these mean? Should they be allowed? prevented?
ignored?

What about induction followed by coinduction?

Change seq to inspect context directly, instead of calling member?

Change the representation of contexts to have explicit tail variable?


Future
======
New syntax for inductive and coinductive definitions?
  Allow for empty predicate definitions? (can define :- false)
  Require used definitions to be defined
  Allow mutual recursion between coinductive and inductive but not both

Get definitions to work with multiple nablas?

Search and case should be smart about looking up definitions

split should work on n-ary conjunctions

Clean up case-analysis tests so they are easy to read and write like
the search tests?

Clean up similarities between replace_metaterm_vars and normalize_binders

Find a way of handling undo state so that I don't have to remember to
  call it each time I start a tactic

Change tactics to be first class and implement tacticals?
  Allow naming of hypotheses
  Support tac1;tac2 where tac2 applies to all subgoals of tac1

Add an apply tactic that works backwards like in coq?

Do we have to consider logic variables in the context during search?

Larger or longer term issues
============================
Implement a robust auto tactic which uses search but also goes
underneath implies and forall. Should backchain on hyps and lemmas
too.

Allow apply with hyps like
  forall X T, member (of X T) L -> forall T', {L |- of X T'} -> T =
  T'.
  How to handle nested nablas then?
  Get David's proof to go through properly

Use type information from sig files?

Change OMakefile so exceptions print full stack trace? Is there a way
  to integrate this with OUnit?

Add a show_lemmas command

Can we represent /\ and \/ using,
  a \/ b := a.
  a \/ b := b.

  a /\ b := a, b.

  What would this mean in the logic?
    Here a and b range over predicates insetad of terms

What is the relationship between meta-level predicates without
implication and object-level predicates without implication?

How to deal with logic variables at the top level
  We need to remember their bindings
  Would also require fixing our issues with timestamps
  This might be best to leave unsupported
  Fix timestamp bug in unify that David has a test for
  Would also search underneath forall
