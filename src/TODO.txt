Soon
====
Allow definition of predicates at the top level

Do cut elimination proof (remove skips)
  Need to add a body to neg so we can search on it

Clean up search code
Clean up restriction checking code
Change lexicographic induction to be nested, so you get
  two induction hypotheses but they are easier to understand with
  the *s and @s

Add equivariant unification

Where do we add raising over supp(T)?

With support for contexts and names,
     Dale's copy example
     Dale's normal example
     Dale's substitution example
     Cut elimination with forall quantifier

Automatically case on implies?
     
Do we have to consider logic variables in the context during search?
How does object cut work with contexts?

Add 'and'

Fix rigid_path_check

Add unification over lppterms?
  If so then simplify search, case, and apply_forall

Make omake target that checks all thm files with their mod files

Make omakefile target for any mod/thm combination

Flatten ndcore into src?

Create extensions module which extends the standard libraries with
missing functions

Larger or longer term issues
============================
Remove duplication between case analysis and searching

Fix all substitution capture issues with replace_lppterm_vars
      "Replace should not capture exists variables" >::
        (fun () ->
           let t = exists ["A"] b in
           let t' = replace_lppterm_vars [("B", var_a)] t in
             assert_pprint_equal "exists A', {A}" t') ;

Use type information from sig files?

Seperate parsers more?

Change OMakefile so exceptions print full stack trace? Is there a way
  to integrate this with OUnit?

Allow forall application with OR on the left

Add a show_lemmas command
Add 'abort'

Add warning if using a capital name without it appearing in forall
  e.g. forall A, {rev A B} -> {rev B A}. should warn about B.
