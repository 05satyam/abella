Before release
  Look at with-typing
  Look at permute variable capture

Later
=====
Think about specification modularity

Flag lambda prolog keywords when reading sig and mod files

Allow delcarations about which types are nominal?
  But which ones are automatically nominal?

Polymorphism? Type constructors?
  Issues when using 'apply' and metavariables

Move examples into their own subdirs where they can have index.html ?
  Reference guide automatically generated?

Future
======
Write some tests for untyping module?

Change context handling to use explicit tail variable

Allow for tacticals
  This requires reworking many things.
  How is tactic failure propogated through tacticals?

New syntax for inductive and coinductive definitions?
  Allow for empty predicate definitions? (can define :- false)
  Require used definitions to be defined
  Allow mutual recursion between coinductive and inductive but not
  both
  This might be good to do when we finally add typing to Abella

From Todd Wilson: Every time I've used "apply .. with .." so far, the
  with clause has been an identity substitution, e.g., "with T0=T0,
  M0=M0". Would it be reasonable to default to this instead of giving
  an error message for missing variables?

Clean up case-analysis tests so they are easy to read and write like
the search tests?

Clean up similarities between replace_metaterm_vars and normalize_binders


Examples
========
System F - can we quantify over logical relations?
Bohm's theorem from Barendregt
Separation theorems from Barendregt
Lustre equation reordering
Lazy lambda calculus by Abramsky


Larger or longer term issues
============================
Implement a robust auto tactic which uses search but also goes
underneath implies and forall. Should backchain on hyps and lemmas
too. To make it faster, perhaps you could specify the hyps and lemmas
that are relevant (like Isabelle's Isar mode).

Allow apply with hyps like
  forall X T, member (of X T) L -> forall T', {L |- of X T'} -> T =
  T'.
  How to handle nested nablas then?
  Get David's proof to go through properly

Use type information from sig files?

Change OMakefile so exceptions print full stack trace? Is there a way
  to integrate this with OUnit?

How to deal with logic variables at the top level
  We need to remember their bindings
  Would also require fixing our issues with timestamps
  This might be best to leave unsupported
  Fix timestamp bug in unify that David has a test for
  Would also search underneath forall

In STLC, this theorem shows a real pain in not having types
  Theorem str : forall L E T A, nabla x,
    ctx L -> {L, of x A |- of E T} -> {L |- of E T}.

