%% Disjoint partitioning of lambda terms into normal and non-normal form

%% The ctxs predicate encodes the relationship between the context
%% of the judgements (term T) and (normal T).

Specification "normal".

Define name : tm -> prop by
  nabla x, name x.

Define ctxs : olist -> olist -> prop by
  ctxs nil nil ;
  nabla x, ctxs (term x :: L) (neutral x :: K) := ctxs L K.


%% Context inversion lemmas

Theorem ctxs_inv1 : forall D L K,
  ctxs L K -> member D L ->
    exists X, D = term X /\ name X /\ member (neutral X) K.
induction on 2. intros. case H2.
  case H1. search.
  case H1. apply IH to H4 H3. search.

Theorem ctxs_inv2 : forall D L K,
  ctxs L K -> member D K ->
    exists X, D = neutral X /\ name X /\ member (term X) L.
induction on 2. intros. case H2.
  case H1. search.
  case H1. apply IH to H4 H3. search.

%% Partitioning is total

Theorem total_ext : forall T L K,
  ctxs L K -> {L |- term T} -> {K |- normal T} \/ {non_normal T}.
induction on 2. intros. case H2.
  apply ctxs_inv1 to H1 H3. case H4. search.
  apply IH to H1 H3. apply IH to H1 H4. case H5.
    case H6.
      case H7.
        apply ctxs_inv2 to H1 H9. case H10.
        search.
        search.
      search.
    search.
  apply IH to _ H3. case H4.
    search.
    search.

Theorem total : forall T,
  {term T} -> {normal T} \/ {non_normal T}.
intros. apply total_ext to _ H1. search.


%% Partitioning is disjoint

Theorem neutral_abs_absurd : forall L K R,
  ctxs L K -> {K |- neutral (abs R)} -> false.
intros. case H2. apply ctxs_inv2 to H1 H3. case H4. case H5.

Theorem disjoint_ext : forall L K T,
  ctxs L K -> {K |- normal T} -> {non_normal T} -> false.
induction on 3. intros. case H2.
  apply ctxs_inv2 to H1 H4. case H5.
  case H3. apply IH to _ H4 H5.
  case H4.
    apply ctxs_inv2 to H1 H5. case H6. case H7. case H3.
    case H3.
      apply neutral_abs_absurd to H1 H5.
      apply IH to H1 _ H7.
      apply IH to H1 H6 H7.

Theorem disjoint : forall T,
  {normal T} -> {non_normal T} -> false.
intros. apply disjoint_ext to _ H1 H2.
