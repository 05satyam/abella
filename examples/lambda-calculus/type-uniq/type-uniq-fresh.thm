%% Type uniqueness for the simply-typed lambda-calculus
%%
%% This development uses an explicit freshness predicate which may be
%% easier to understand for new users to Abella.

Specification "type-uniq".

Define name : tm -> prop by
  nabla x, name x.

Define fresh : tm -> o -> prop by
  nabla x, fresh x E.

Define freshlist : tm -> olist -> prop by
  nabla x, freshlist x E.

Theorem member_fresh : forall X L E,
  member E L -> freshlist X L -> fresh X E.
induction on 1. intros. case H1.
  case H2. search.
  assert freshlist X L1.
    case H2. search.
    apply IH to H3 H4. search.

Define ctx : olist -> prop by
  ctx nil ;
  ctx (of X T :: L) := freshlist X L /\ ctx L.

Theorem ctx_inv : forall L D,
  ctx L -> member D L -> exists E T, D = of E T /\ name E.
induction on 1. intros. case H1.
  case H2.
  case H2.
    case H3. search.
    apply IH to H4 H5. search.

Theorem ctx_uniq : forall L E T1 T2,
  ctx L -> member (of E T1) L -> member (of E T2) L -> T1 = T2.
induction on 1. intros. case H1.
  case H2.
  case H2.
    case H3.
      search.
      apply member_fresh to H6 H4. case H7.
    case H3.
      apply member_fresh to H6 H4. case H7.
      apply IH to H5 H6 H7. search.

Theorem type_uniq : forall L E T1 T2,
  ctx L -> {L |- of E T1} -> {L |- of E T2} -> T1 = T2.
induction on 2. intros. case H2.
  apply ctx_inv to H1 H4. case H5. case H3.
    apply ctx_inv to H1 H7. case H8.
      apply ctx_uniq to H1 H4 H7. search.
    case H6.
    case H6.
  case H3.
    apply ctx_inv to H1 H5. case H6. case H7.
    apply IH to _ H4 H5. search.
  case H3.
    apply ctx_inv to H1 H6. case H7. case H8.
    apply IH to H1 H4 H6. search.
