Specification "multistep".

Import "lambda-sigma".
Import "multistep".

% Sigma Normal Form
Define snf : tm -> prop by
  snf M := forall M', {step su M M'} -> false.

% Substitution Sigma Normal Form
Define ssnf : sub -> prop by
  ssnf S := forall S', {steps su S S'} -> false.

Theorem clos_can_step_ext :
  (forall M S, {tm M} -> {sub S} -> exists M', {step su (clos M S) M'}) /\
  (forall S1 S2, {sub S1} -> {sub S2} -> exists S3, {steps su (comp S1 S2) S3}).
induction on 2 2. split. intros. case H1.
  search.
  case H2.
    apply add_exists to H3 with B = N1. search.
    case H3.
      search.
      search.
    apply IH1 to H4 H5. search.
  search.
  search.
  search.
intros. case H1.
  case H2.
    apply add_exists to H3 with B = N1. search.
    case H3.
      search.
      search.
    apply IH1 to H4 H5. search.
  search.
  search.

Split clos_can_step_ext as clos_can_step, comp_can_step.

Theorem snf_or_step : forall M,
  {tm M} -> snf M \/ exists M', {step su M M'}.
induction on 1. intros. case H1.
  left. unfold. intros. case H2.
  left. unfold. intros. case H3.
  apply clos_can_step to H2 H3. right. search.
  apply IH to H2. apply IH to H3. case H4.
    case H5.
      left. unfold. intros. case H8.
        case H6. apply H10 to H9.
        case H7. apply H10 to H9.
      right. search.
    right. search.
  apply IH to H2. case H3.
    left. unfold. intros. case H4. case H5. apply H6 to H7.
    right. search.

Theorem ssnf_or_steps : forall S,
  {sub S} -> ssnf S \/ exists S', {steps su S S'}.
induction on 1. intros. case H1.
  left. unfold. intros. case H3.
  apply snf_or_step to H2. apply IH to H3. case H4.
    case H5.
      case H2.
        left. unfold. intros. case H8.
          case H6. apply H10 to H9.
          case H7. apply H10 to H9.
        case H3.
          apply compare_nats3 to _ H9 with N1 = (s N). case H10.
            right. search.
            left. unfold. intros. case H12.
              case H13.
              case H13.
              apply lesseq_absurd to H11.
            left. unfold. intros. case H12.
              case H13.
              case H13.
              apply lesseq_absurd to H11.
          left. unfold. intros. case H11.
            case H12.
            case H7. apply H13 to H12.
          apply comp_can_step to H9 H10.
            case H7. apply H12 to H11.
        apply clos_can_step to H8 H9.
          case H6. apply H11 to H10.
        left. unfold. intros. case H10.
          case H6. apply H12 to H11.
          case H7. apply H12 to H11.
        left. unfold. intros. case H9.
          case H6. apply H11 to H10.
          case H7. apply H11 to H10.
      right. search.
    right. search.
  apply comp_can_step to H2 H3. right. search.

Theorem snf_exists : forall M,
  {tm M} -> exists M', {mstep_su0 M M'} /\ snf M'.
assert forall M, sn_su M -> {tm M} -> exists M', {mstep_su0 M M'} /\ snf M'.
induction on 1. intros. apply snf_or_step to H2. case H3.
  search.
  case H1. apply H5 to H4.
    apply tm_step to _ H4. apply IH to H6 _. search.
intros. apply tm_sn_su to H2. backchain H1.

Theorem ssnf_exists : forall S,
  {sub S} -> exists S', {msteps_su0 S S'} /\ ssnf S'.
assert forall S, sns_su S -> {sub S} -> exists S', {msteps_su0 S S'} /\ ssnf S'.
induction on 1. intros. apply ssnf_or_steps to H2. case H3.
  search.
  case H1. apply H5 to H4.
    apply sub_step to _ H4. apply IH to H6 _. search.
intros. apply sub_sns_su to H2. backchain H1.

Theorem snf2wsnf : forall M, {tm M} -> snf M -> {wsnf M}.
induction on 1. intros. case H1.
  search.
  search.
  apply clos_can_step to H3 H4. case H2. apply H6 to H5.
  case H2. apply IH to H3 _. unfold. intros. backchain H5.
    apply IH to H4 _. unfold. intros. backchain H5. search.
  case H2. apply IH to H3 _. unfold. intros. backchain H4. search.

Theorem ssnf2wssnf : forall S, {sub S} -> ssnf S -> {wssnf S}.
induction on 1. intros. case H1.
  search.
  case H2. apply snf2wsnf to H3 _. unfold. intros. backchain H5.
    apply IH to H4 _. unfold. intros. backchain H5. search.
  apply comp_can_step to H3 H4. case H2. apply H6 to H5.

Theorem wsnf2snf : forall M, {wsnf M} -> snf M.
induction on 1. intros. case H1.
  unfold. intros. case H2.
  unfold. intros. case H2.
  unfold. intros. case H4.
    apply IH to H2. case H6. apply H7 to H5.
    apply IH to H3. case H6. apply H7 to H5.
  unfold. intros. case H3.
    apply IH to H2. case H5. apply H6 to H4.

Theorem wsnf_exists : forall M,
  {tm M} -> exists M', {mstep_su0 M M'} /\ {wsnf M'}.
intros. apply snf_exists to H1.
apply tm_mstep_su0 to _ H2.
apply snf2wsnf to _ H3. search.

Theorem wssnf_exists : forall S,
  {sub S} -> exists S', {msteps_su0 S S'} /\ {wssnf S'}.
intros. apply ssnf_exists to H1.
apply sub_msteps_su0 to _ H2.
apply ssnf2wssnf to _ H3. search.

Theorem wsnf_step_eq : forall M1 M2, {wsnf M1} -> {mstep_su0 M1 M2} -> M2 = M1.
intros. case H2. search. apply wsnf2snf to H1. case H5. apply H6 to H3.

