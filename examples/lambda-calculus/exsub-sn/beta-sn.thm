Specification "beta-sn".

Import "beta".
Import "typing".

% Strong normalization of the ordinary lambda-calculus, i.e. the snf-fragment
Define sn_be : tm -> prop by
  sn_be M1 := forall M2, beta M1 M2 -> sn_be M2.

Define neutral : tm -> prop by
  neutral M := forall M1, M = lam M1 -> false.

%% Reduce is the logical relation used to prove normalization.
%%
%% This definition uses itself recursively in a negative context (the
%% left side of an implication). In order to guarantee consistency of
%% the system we must ensure this definition is stratified. Note the
%% third argument to reduce is strictly smaller in the (negative)
%% recursive occurrence, thus the definition is indeed stratified.

Define reduce : ctx -> tm -> ty -> prop by
  reduce G M base := {ctx G} /\ {of G M base} /\ {wsnf M} /\ sn_be M ;
  reduce G M (arrow A B) :=
    {ctx G} /\ {of G M (arrow A B)} /\ {wsnf M} /\
    (forall U, reduce G U A -> reduce G (app M U) B).

Define reduces : ctx -> sub -> ctx -> prop by
  reduces G' (shift N) G := {ctx G'} /\ {ofs G' (shift N) G} ;
  reduces G' (dot M S) (cons G A) :=
    reduce G' M A /\ reduces G' S G.

Theorem reduce_ctx : forall G A M, reduce G M A -> {ctx G}.
intros. case H1. search. search.

Theorem reduces_ctx : forall G G' S, reduces G S G' -> {ctx G}.
intros. case H1. search. apply reduce_ctx to H2. search.

Theorem reduce_of : forall G A M, reduce G M A -> {of G M A}.
intros. case H1. search. search.

Theorem reduces_ofs : forall G' G S, reduces G' S G -> {ofs G' S G}.
induction on 1. intros. case H1. search.
apply IH to H3. apply reduce_of to H2. search.

Theorem reduce_wsnf : forall G A M, reduce G M A -> {wsnf M}.
intros. case H1. search. search.

Theorem reduces_wssnf : forall G' G S, reduces G' S G -> {wssnf S}.
induction on 1. intros. case H1. search.
apply IH to H3. apply reduce_wsnf to H2. search.

Theorem sn_be_step : forall M1 M2,
  sn_be M1 -> beta M1 M2 -> sn_be M2.
intros. case H1. apply H3 to H2. search.

Theorem of_mstep_su0 : forall G A M1 M2,
  {of G M1 A} -> {mstep_su0 M1 M2} -> {of G M2 A}.
induction on 2. intros. case H2. search.
apply of_step to H1 H3.
apply IH to H5 H4. search.

Theorem of_beta : forall G A M1 M2,
  {of G M1 A} -> beta M1 M2 -> {of G M2 A}.
intros. case H2. apply of_step to H1 H3. apply of_mstep_su0 to H6 H4. search.

% CR2
Theorem reduce_beta : forall G M1 M2 A,
  reduce G M1 A -> beta M1 M2 -> reduce G M2 A.
induction on 1. intros. apply beta2wsnf to H2. case H1.
  apply of_beta to H5 H2. apply sn_be_step to H7 H2. search.
  unfold.
    search.
    apply of_beta to H5 H2. search.
    search.
    intros. apply H7 to H8.
      apply reduce_wsnf to H8.
      apply beta_cong_appl to H2 H10.
      apply IH to H9 H11. search.

Theorem sn_app_l : forall M1 M2,
  sn_be (app M1 M2) -> {wsnf M2} -> sn_be M1.
induction on 1. intros. case H1.
  unfold. intros.
    apply beta_cong_appl to H4 H2.
    apply H3 to H5. apply IH to H6 _. search.

Theorem invert_beta_app : forall M1 M2 M,
  beta (app M1 M2) M -> {wsnf (app M1 M2)} ->
    (exists M1', M = app M1' M2 /\ beta M1 M1') \/
    (exists M2', M = app M1 M2' /\ beta M2 M2') \/
    (exists M1', M1 = lam M1' /\ {mstep_su0 (clos M1' (dot M2 (shift z))) M}).
intros. case H1. case H2. case H3.
  left. left. apply mstep_su0_inv_app to H4.
    apply wsnf_step_eq to _ H10. case H5. search.
  left. right. apply mstep_su0_inv_app to H4.
    apply wsnf_step_eq to _ H9. case H5. search.
  right. search.

Theorem invert_beta_lam : forall M1 M,
  beta (lam M1) M -> exists M2, M = lam M2 /\ beta M1 M2.
intros. case H1. case H2. apply mstep_su0_inv_lam to H3. case H4. search.

% CR1 and CR3 are mutually recursive,
Theorem cr1_cr3 : forall A,
  {ty A} ->
    (forall G M, reduce G M A -> sn_be M)
    /\
    (forall G M, neutral M -> {ctx G} -> {of G M A} -> {wsnf M} ->
                 (forall P, beta M P -> reduce G P A) ->
                   reduce G M A).
induction on 1. intros. split*.
  % CR1
  intros. case H2.
    % Atomic case
    search.
    % Arrow case
    case H1.
    assert (neutral (c A1)).
      unfold. intros. case H9.
    assert {of G (c A1) A1}.
    assert (forall P, beta (c A1) P -> reduce G P A1).
      intros. case H11. case H12.
    apply IH to H7.
    apply H13 to H9 _ H10 _ H11.
    apply H6 to H14.
    apply IH to H8.
    apply H16 to H15.
    apply sn_app_l to H18 _. search.
  % CR3
  intros. case H1.
    % Atomic type
    unfold.
      search.
      search.
      search.
      unfold. intros.
        apply H7 to H8. apply H2 to H9. search.
    % Arrow type
    unfold.
      search.
      search.
      search.
      intros.
        apply IH to H8.
        apply H11 to H10.
          % We want to induct on (sn U) so we have to abstract the
          % variable U out entirely.
          assert forall U, sn_be U -> reduce G U A1 -> reduce G (app M U) B.
            induction on 1. intros. case H14.
              apply reduce_wsnf to H15.
              assert forall P, beta (app M U1) P -> reduce G P B.
                intros. apply invert_beta_app to H18 _.
                case H19.
                  apply H7 to H20. case H21.
                    apply H25 to H15. search.
                  apply H16 to H20. apply reduce_beta to H15 H20.
                    apply IH1 to H21 H22. search.
                  case H3. apply H21 to _.
              assert neutral (app M U1).
                unfold. intros. case H19.
              assert {of G (app M U1) B}.
                apply reduce_of to H15. search.
              apply IH to H9.
              apply H22 to H19 _ H20 _ H18. search.
          apply H14 to H13 H10. search.

% CR1
Theorem reduce_sn : forall G A M,
  reduce G M A -> sn_be M.
intros. apply reduce_ctx to H1. apply reduce_of to H1. apply of_ty to H2 H3.
apply cr1_cr3 to H4. apply H5 to H1. search.

% CR3
Theorem neutral_step_reduce : forall G A M,
  neutral M -> {ctx G} -> {of G M A} -> {wsnf M} ->
    (forall P, beta M P -> reduce G P A) ->
    reduce G M A.
intros. apply of_ty to H2 H3. apply cr1_cr3 to H6. apply H8 to H1 H2 H3 H4 H5. search.

Theorem reduce_const : forall G A,
  {ctx G} -> {ty A} -> reduce G (c A) A.
intros. backchain neutral_step_reduce.
  unfold. intros. case H3.
  intros. case H3. case H4.

Theorem reduce_var : forall G N A,
  {ctx G} -> {of G (var N) A} -> reduce G (var N) A.
intros. backchain neutral_step_reduce.
  unfold. intros. case H3.
  intros. case H3. case H4.

Theorem mstep_su0_of : forall G A M1 M2, {of G M1 A} -> {mstep_su0 M1 M2} -> {of G M2 A}.
induction on 2. intros. case H2. search.
apply of_step to H1 H3. apply IH to H5 H4. search.

Theorem beta_of : forall G A M1 M2, {of G M1 A} -> beta M1 M2 -> {of G M2 A}.
intros. case H2.
apply of_step to H1 H3. apply mstep_su0_of to H6 H4. search.

Theorem reduce_lam : forall G A B M U,
  sn_be M -> sn_be U -> reduce G U A -> {wsnf M} -> {of (cons G A) M B} ->
    (forall U, reduce G U A -> exists M',
        {mstep_su0 (clos M (dot U (shift z))) M'} /\ {wsnf M'} /\ reduce G M' B) ->
      reduce G (app (lam M) U) B.
induction on 1. induction on 2. intros.
apply reduce_ctx to H3.
apply reduce_wsnf to H3.
backchain neutral_step_reduce.
  unfold. intros. case H9.
  apply reduce_of to H3. apply of_ty to _ H9. search.
intros. apply invert_beta_app to H9 _. case H10.
  % 1.
  apply invert_beta_lam to H11.
  case H1.
  apply H13 to H12.
  backchain IH. backchain beta2wsnf. backchain beta_of.
  intros.
  apply H6 to H15.
  case H12.
  assert {tm M}.
    apply of_tm to H5. search.
  assert {tm U1}.
    apply reduce_of to H15. apply of_tm to H23. search.
  apply project_beta_clos to _ _ H19 H16 _.
  apply mstep_su0_cong_closl to H20 with S = dot U1 (shift z).
  apply conf_tm to _ H24 H26.
    apply tm_step to _ H19. search.
  apply beta2wsnf to H25.
  apply wsnf_step_eq to _ H27.
  apply reduce_beta to H18 H25.
  search.
  % 2.
  apply reduce_beta to H3 H11.
  case H2.
  apply H13 to H11.
  apply IH1 to H1 H14 H12 _ _ H6.
  search.
  % 3.
  apply H6 to H3.
  apply conf_tm to _ H11 H12.
    apply of_tm to H5.
    apply reduce_of to H3.
    apply of_tm to H16.
    search.
  apply wsnf_step_eq to _ H16.
  apply wsnf_step_eq to _ H15.
    backchain beta2wsnf.
  search.

Theorem sn_clos : forall M S M',
  {tm M} -> {sub S} -> {mstep_su0 (clos M S) M'} -> {wsnf M'} -> sn_be M' -> sn_be M.
induction on 5. intros. unfold. intros.
case H6.
apply project_beta_clos to _ _ H7 H3 _.
case H5.
apply H12 to H11.
apply beta2wsnf to H11.
apply mstep_su0_cong_closl to H8 with S = S.
apply tm_step to _ H7.
apply conf_tm to _ H10 H15.
apply wsnf_step_eq to _ H17.
apply tm_mstep_su0 to _ H8.
apply IH to _ _ H18 _ H13.
search.

Theorem strong_beta_ext : forall G G' M S A,
  {ctx G} -> {of G' M A} -> {wsnf M} -> reduces G S G' ->
    exists M', {mstep_su0 (clos M S) M'} /\ {wsnf M'} /\ reduce G M' A.
induction on 2. intros. case H3.
  % c
  case H2. apply reduce_const to H1 H5. search.
  % var
  case H4.
    % shift
    apply of_tm to H2.
    case H7.
    apply add_exists to H8 with B = N1.
    exists var C.
    split. search. search.
    backchain reduce_var.
    backchain of_step.
    % dot
    case H2.
      apply reduce_wsnf to H5. search.
      apply IH to _ H7 _ H6. search.
  % app
  case H2.
  apply IH to _ H7 _ H4.
  apply IH to _ H8 _ H4.
  apply mstep_su0_cong_appl to H9 with N = clos M2 S.
  apply mstep_su0_cong_appr to H12 with M = M'.
  apply mstep_su0_trans to H15 H16.
  case H11.
  apply H21 to H14.
  search.
  % lam
  case H2.
  apply of_tm to H7.
  assert {sub S}.
    apply reduces_ofs to H4. apply ofs_sub to H9. search.
  apply wsnf_exists to _ with M = clos M1 (dot (var z) (comp S (shift (s z)))).
    search 10.
  exists lam M'. split.
    apply mstep_su0_cong_lam to H10. search.
    search.
  apply mstep_su0_of to _ H10 with G = cons G A1, A = B.
    apply reduces_ofs to H4. search.
  unfold.
    search. search. search.
  assert forall U, reduce G U A1 -> (exists M,
      {mstep_su0 (clos M' (dot U (shift z))) M} /\ {wsnf M} /\ reduce G M B).
    intros.
    apply IH to _ H7 _ _ with S = dot U S.
    apply comp_id to _ with S = S.
    apply msteps_su0_cong_dotr to H17 with M = U. clear H17.
    apply mstep_su0_cong_closr to H18 with M = M1. clear H18.
    apply mstep_su0_trans to H19 H14. clear H19.
    apply mstep_su0_cong_closl to H10 with S = dot U (shift z).
    apply conf_tm to _ H21 _ with M2 = M'1.
      search 10.
      apply reduce_of to H13. apply of_tm to H22. search 10.
    apply wsnf_step_eq to _ H23. clear H23.
    search.
  intros.
  backchain reduce_lam.
    apply H13 to H14.
    apply reduce_sn to H17.
    apply of_tm to H12.
    apply reduce_of to H14.
    apply of_tm to H20.
    apply sn_clos to _ _ H15 _ H18.
    search.
    backchain reduce_sn.
    % search. % added for Abella 1.3.5, unnecessary otherwise

Theorem strong_beta : forall G M A, {ctx G} -> {of G M A} -> sn_be M.
assert forall G M A, {ctx G} -> {of G M A} -> {wsnf M} -> sn_be M.
  intros.
  assert reduces G (shift z) G.
  apply strong_beta_ext to _ H2 _ H4.
  apply of_tm to H2.
  apply clos_id to H8.
  apply conf_tm to _ H5 H9.
  apply wsnf_step_eq to _ H10. clear H10.
  apply wsnf_step_eq to _ H11. clear H11.
  backchain reduce_sn.
intros. unfold. intros.
apply of_beta to H3 H4. case H4.
backchain H1.


