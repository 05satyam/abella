Specification "multistep".

% Confluence of the sigma-fragment by combining local confluence with strong normalization

Import "lambda-sigma".
Import "multistep".
Import "snf".

Theorem lemma_twiddle : forall N1 N2,
  {nat N1} -> exists N3, {add N1 (s N2) N3} /\ {add (s N1) N2 N3}.
intros. apply add_exists to H1 with B = (s N2). apply add_twiddle to H2. search.

Theorem lemma_eta_comp : forall N S,
  {nat N} -> {sub S} -> exists S', {msteps_su0 (comp (shift N) S) S'} /\
    {msteps_su0 (dot (clos (var N) S) (comp (shift (s N)) S)) S'}.
induction on 1. intros.
apply wssnf_exists to H2.
assert exists S'', {msteps_su0 (comp (shift N) S') S''} /\
    {msteps_su0 (dot (clos (var N) S') (comp (shift (s N)) S')) S''}.
  case H4.
    apply add_exists to H1 with B = N1. search.
    case H1.
      search.
      apply sub_msteps_su0 to _ H3. case H8.
        apply IH to H7 H10. search.
case H5.
apply msteps_su0_cong_compr to H3 with S1 = shift N.
apply msteps_su0_trans to H8 H6.
apply mstep_su0_cong_closr to H3 with M = var N.
apply msteps_su0_cong_compr to H3 with S1 = shift (s N).
apply msteps_su0_cong_dotl to H10 with S = comp (shift (s N)) S.
apply msteps_su0_cong_dotr to H11 with M = clos (var N) S'.
apply msteps_su0_trans to H12 H13.
apply msteps_su0_trans to H14 H7.
search.

Theorem lemma_add_var_shift : forall N1 N2 N3 S,
  {add N1 N2 N3} -> {nat N2} -> {sub S} -> exists M, {mstep_su0 (clos (var N3) S) M} /\
    {mstep_su0 (clos (var N1) (comp (shift N2) S)) M}.
induction on 2. intros.
apply wssnf_exists to H3.
assert exists M', {mstep_su0 (clos (var N3) S') M'} /\
    {mstep_su0 (clos (var N1) (comp (shift N2) S')) M'}.
  case H5.
    % shift
    apply add_isnat2 to H1 _.
    apply add_exists to H2 with B = N.
    apply add_exists to H6 with B = N.
    apply add_assoc to H1 H8 H7.
    search.
    % dot
    case H2.
      % z
      apply add_isnat1 to H1.
      apply add_base to H8.
      apply add_det to H1 H9.
      search.
      % s N
      apply add_s to H1.
      apply add_inv_step to H1.
      apply sub_msteps_su0 to _ H4.
      case H10.
      apply IH to H9 H8 H12.
      search.
case H6.
apply mstep_su0_cong_closr to H4 with M = var N3.
apply mstep_su0_trans to H9 H7.
apply msteps_su0_cong_compr to H4 with S1 = shift N2.
apply mstep_su0_cong_closr to H11 with M = var N1.
apply mstep_su0_trans to H12 H8.
search.

Theorem lemma_add_shift_shift : forall N1 N2 N3 S,
  {add N1 N2 N3} -> {nat N2} -> {sub S} -> exists S', {msteps_su0 (comp (shift N3) S) S'} /\
    {msteps_su0 (comp (shift N1) (comp (shift N2) S)) S'}.
induction on 2. intros.
apply wssnf_exists to H3.
assert exists S'', {msteps_su0 (comp (shift N3) S') S''} /\
    {msteps_su0 (comp (shift N1) (comp (shift N2) S')) S''}.
  case H5.
    % shift
    apply add_isnat2 to H1 _.
    apply add_exists to H2 with B = N.
    apply add_exists to H6 with B = N.
    apply add_assoc to H1 H8 H7.
    search.
    % dot
    case H2.
      % z
      apply add_isnat1 to H1.
      apply add_base to H8.
      apply add_det to H1 H9.
      search.
      % s N
      apply add_s to H1.
      apply add_inv_step to H1.
      apply sub_msteps_su0 to _ H4.
      case H10.
      apply IH to H9 H8 H12.
      search.
case H6.
apply msteps_su0_cong_compr to H4 with S1 = shift N3.
apply msteps_su0_trans to H9 H7.
apply msteps_su0_cong_compr to H4 with S1 = shift N2.
apply msteps_su0_cong_compr to H11 with S1 = shift N1.
apply msteps_su0_trans to H12 H8.
search.

Theorem local_conf :
  (forall M M1 M2, {tm M} -> {step su M M1} -> {step su M M2} ->
    exists M', {mstep_su0 M1 M'} /\ {mstep_su0 M2 M'}) /\
  (forall S S1 S2, {sub S} -> {steps su S S1} -> {steps su S S2} ->
    exists S', {msteps_su0 S1 S'} /\ {msteps_su0 S2 S'}).
induction on 2 2. split. intros. case H2. % 12 sg
  % 1.1
  case H1. case H3. % 9 sg
    apply IH to _ H4 H7. apply mstep_su0_cong_closl to H8 with S = S.
      apply mstep_su0_cong_closl to H9 with S = S. search.
    search. case H4.
    case H4. case H4. case H4.
    case H4. % 9 sg
      search. search. search.
      search. search.
      case H5. case H9. apply lemma_add_var_shift to H7 _ H6. search.
      search. search.
      search 15.
    case H4.
      search.
      search.
    case H4. search.
  % 1.2
  case H1. case H3. % 9 sg
    search.
    apply IH1 to _ H4 H7. apply mstep_su0_cong_closr to H8 with M = M3.
      apply mstep_su0_cong_closr to H9 with M = M3. search.
    search.
    case H4.
      search. search. search.
    case H4.
      search. search.
      case H5. case H7. apply lemma_twiddle to H8 with N2 = K. search.
    case H4.
    search. search. search.
  % 1.3
  case H1. case H3.
    apply IH to _ H4 H7. apply mstep_su0_cong_appl to H8 with N = N.
      apply mstep_su0_cong_appl to H9 with N = N. search.
    search.
  % 1.4
  case H1. case H3.
    search.
    apply IH to _ H4 H7. apply mstep_su0_cong_appr to H8 with M = M3.
      apply mstep_su0_cong_appr to H9 with M = M3. search.
  % 1.5
  case H1. case H3.
    apply IH to _ H4 H6. apply mstep_su0_cong_lam to H7.
      apply mstep_su0_cong_lam to H8. search.
  % 1.6
  case H3.
    case H4. search. search.
  % 1.7
  case H3.
    case H4.
    case H4.
      search. search. search.
    search.
  % 1.8
  case H3.
    case H4.
    case H4.
      search. search.
      case H1. case H5. case H7. apply lemma_twiddle to H8 with N2 = K. search.
    search.
  % 1.9
  case H3.
    case H5.
    case H5.
    apply add_det to H4 H5. search.
  % 1.10
  case H3.
    case H4. % 9 sg
      search. search. search.
      search. search.
      case H1. case H6. case H9. apply lemma_add_var_shift to H5 _ H7. search.
      search. search.
      search 15.
    search.
    search.
  % 1.11
  case H3.
    case H4.
      search. search.
    search.
    search.
  % 1.12
  case H3.
    case H4. search.
    search.
    search.
intros. case H2. % 10 sg
  % 2.1
  case H1. case H3.
    apply IH to _ H4 H7. apply msteps_su0_cong_dotl to H8 with S = S3.
      apply msteps_su0_cong_dotl to H9 with S = S3. search.
    search.
    case H4.
  % 2.2
  case H1. case H3.
    search.
    apply IH1 to _ H4 H7. apply msteps_su0_cong_dotr to H8 with M = M.
      apply msteps_su0_cong_dotr to H9 with M = M. search.
    case H4.
  % 2.3
  case H3.
    case H4.
    case H4.
    search.
  % 2.4
  case H1. case H3. % 7 sg
    apply IH1 to _ H4 H7. apply msteps_su0_cong_compl to H8 with S2 = S4.
      apply msteps_su0_cong_compl to H9 with S2 = S4. search.
    search. case H4.
    case H4.
      search.
      search.
      case H5. case H7. apply lemma_eta_comp to H9 H6. search.
    case H4.
    case H4.
    case H4. % 7 sg
      search. search. search.
      search. search.
      case H5. case H9. apply lemma_add_shift_shift to H7 _ H6. search.
      search.
  % 2.5
  case H1. case H3. % 7 sg
    search.
    apply IH1 to _ H4 H7. apply msteps_su0_cong_compr to H8 with S1 = S3.
      apply msteps_su0_cong_compr to H9 with S1 = S3. search.
    search.
    search.
    case H4.
      search. search.
      case H5. case H7. apply lemma_twiddle to H8 with N2 = K. search.
    case H4.
    search.
  % 2.6
  case H3.
    case H4.
    search.
    search.
    case H4. search.
  % 2.7
  case H3.
    case H4.
      search. search.
      case H1.
      case H5. case H7. apply lemma_eta_comp to H9 H6. search.
    search.
    search.
  % 2.8
  case H3.
    case H4.
    case H4.
      search.
      search.
      case H1. case H5. case H7. apply lemma_twiddle to H8 with N2 = K. search.
    search.
  % 2.9
  case H3.
    case H5.
    case H5.
    case H4. search.
    apply add_det to H4 H5. search.
  % 2.10
  case H3.
    case H4. % 7 sg
      search. search. search.
      search. search.
      case H1. case H6. case H9. apply lemma_add_shift_shift to H5 _ H7. search.
      search.
    search.
    search.

Split local_conf as local_conf_tm, local_conf_sub.

Theorem conf_tm' : forall M M1 M2,
  {tm M} -> sn_su M -> {mstep_su0 M M1} -> {mstep_su0 M M2} ->
    exists M', {mstep_su0 M1 M'} /\ {mstep_su0 M2 M'}.
induction on 2. intros. case H3. search. case H4. search.
case H2.
apply H9 to H5.
apply H9 to H7.
apply local_conf_tm to _ H5 H7.
apply tm_step to _ H5.
apply tm_step to _ H7.
apply IH to _ H10 H6 H12.
apply mstep_su0_trans to H13 H17.
apply IH to _ H11 H18 H8.
apply mstep_su0_trans to H16 H19.
search.

Theorem conf_sub' : forall S S1 S2,
  {sub S} -> sns_su S -> {msteps_su0 S S1} -> {msteps_su0 S S2} ->
    exists S', {msteps_su0 S1 S'} /\ {msteps_su0 S2 S'}.
induction on 2. intros. case H3. search. case H4. search.
case H2.
apply H9 to H5.
apply H9 to H7.
apply local_conf_sub to _ H5 H7.
apply sub_step to _ H5.
apply sub_step to _ H7.
apply IH to _ H10 H6 H12.
apply msteps_su0_trans to H13 H17.
apply IH to _ H11 H18 H8.
apply msteps_su0_trans to H16 H19.
search.

Theorem conf_tm : forall M M1 M2,
  {tm M} -> {mstep_su0 M M1} -> {mstep_su0 M M2} ->
    exists M', {mstep_su0 M1 M'} /\ {mstep_su0 M2 M'}.
intros. apply tm_sn_su to H1. backchain conf_tm'.

Theorem conf_sub : forall S S1 S2,
  {sub S} -> {msteps_su0 S S1} -> {msteps_su0 S S2} ->
    exists S', {msteps_su0 S1 S'} /\ {msteps_su0 S2 S'}.
intros. apply sub_sns_su to H1. backchain conf_sub'.

