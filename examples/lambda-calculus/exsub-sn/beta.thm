Specification "multistep".

% Theorem project_beta shows that arbitrary beta-steps in lambda-sigma terms
% corresponds to beta-steps in the sigma normal forms.  This relies on
% disallowing beta-steps inside substitutions, and thus we avoid Mellies
% counterexample to strong normalization in lambda-sigma.

Import "conf".

% Beta-reduction of Sigma Normal Forms
Define beta : tm -> tm -> prop by
  beta M1 M3 := exists M2, {step be M1 M2} /\ {mstep_su0 M2 M3} /\ {wsnf M3}.

Theorem beta2wsnf : forall M1 M2, beta M1 M2 -> {wsnf M2}.
intros. case H1. search.

Theorem beta_cong_appl : forall M1 M2 M1',
  beta M1 M1' -> {wsnf M2} -> beta (app M1 M2) (app M1' M2).
intros. case H1. apply mstep_su0_cong_appl to H4 with N = M2. search.

Theorem beta_cong_appr : forall M1 M2 M2',
  beta M2 M2' -> {wsnf M1} -> beta (app M1 M2) (app M1 M2').
intros. case H1. apply mstep_su0_cong_appr to H4 with M = M1. search.

Theorem beta_cong_lam : forall M M',
  beta M M' -> beta (lam M) (lam M').
intros. case H1. apply mstep_su0_cong_lam to H3. search.

Theorem clos_id_ext :
  (forall M, {tm M} -> {mstep_su0 (clos M (shift z)) M}) /\
  (forall S, {sub S} -> {msteps_su0 (comp S (shift z)) S}).
induction on 1 1. split. intros. case H1.
  search.
  apply add_base to H2. search.
  apply IH1 to H3. apply mstep_su0_cong_closr to H4 with M = M1. search.
  apply IH to H2. apply IH to H3.
    apply mstep_su0_cong_appl to H4 with N = (clos M2 (shift z)).
    apply mstep_su0_cong_appr to H5 with M = M1.
    apply mstep_su0_trans to H6 H7. search.
  apply IH to H2.
    apply mstep_su0_cong_lam to H3. search 10.
intros. case H1.
  apply add_base to H2. search.
  apply IH to H2. apply IH1 to H3.
    apply msteps_su0_cong_dotl to H4 with S = comp S1 (shift z).
    apply msteps_su0_cong_dotr to H5 with M = M.
    apply msteps_su0_trans to H6 H7. search.
  apply IH1 to H3. apply msteps_su0_cong_compr to H4 with S1 = S1. search.

Split clos_id_ext as clos_id, comp_id.

% If M1 --beta-> M2 then
% snf(M1[S]) --beta-> snf(M2[S])
Theorem project_beta_clos : forall M1 M1' M2 S,
  {tm M1} -> {sub S} -> {step be M1 M2} -> {mstep_su0 (clos M1 S) M1'} -> {wsnf M1'} ->
    exists M2', {mstep_su0 (clos M2 S) M2'} /\ beta M1' M2'.
induction on 3. intros. case H1.
  % c
  case H3.
  % var
  case H3.
  % clos
  case H3.
  apply conf_tm to _ H4 _ with M2 = (clos M (comp S1 S)).
  apply wsnf_step_eq to _ H9.
  apply IH to _ _ H8 H10 H5. search.
  % app
  apply conf_tm to _ H4 _ with M2 = (app (clos M3 S) (clos M4 S)).
  apply wsnf_step_eq to _ H8.
  apply mstep_su0_inv_app to H9.
  case H5.
  case H3.
    % appl
    apply IH to _ _ H14 H10 _.
    apply beta_cong_appl to H16 H13.
    apply mstep_su0_cong_appl to H15 with N = clos M4 S.
    apply mstep_su0_cong_appr to H11 with M = M2'1.
    apply mstep_su0_trans to H18 H19.
    search.
    % appr
    apply IH to _ _ H14 H11 _.
    apply beta_cong_appr to H16 H12.
    apply mstep_su0_cong_appr to H15 with M = clos M3 S.
    apply mstep_su0_cong_appl to H10 with N = M2'1.
    apply mstep_su0_trans to H18 H19.
    search.
    % beta
    apply conf_tm to _ H10 _ with M2 = lam (clos M (dot (var z) (comp S (shift (s z))))).
    apply wsnf_step_eq to _ H14.
    apply mstep_su0_inv_lam to H15.
    apply mstep_su0_cong_closl to H16 with S = dot (clos M4 S) (shift z).
    apply msteps_su0_cong_dotl to H11 with S = shift z.
    apply mstep_su0_cong_closr to H18 with M = M5.
    apply mstep_su0_trans to H17 H19.
    case H6.
    apply wsnf_exists to _ with M = clos M (dot (clos M4 S) S).
    apply comp_id to H2.
    apply msteps_su0_cong_dotr to H24 with M = clos M4 S.
    apply mstep_su0_cong_closr to H25 with M = M.
    apply mstep_su0_trans to H26 H22.
    apply conf_tm to _ H20 _ with M2 = M'2.
      search 10. search 10.
    apply wsnf_step_eq to _ H29.
    search 10.
  % lam
  case H3.
  apply conf_tm to _ H4 _ with M2 = lam (clos M (dot (var z) (comp S (shift (s z))))).
  apply wsnf_step_eq to _ H8.
  apply mstep_su0_inv_lam to H9.
  case H5.
  apply IH to _ _ H7 H10 _.
  apply beta_cong_lam to H13.
  apply mstep_su0_cong_lam to H12.
  search.

% If M1 --> M2 with a beta-step then
% snf(M1) --beta-> snf(M2)
Theorem project_beta : forall M1 M1' M2,
  {tm M1} -> {step be M1 M2} -> {mstep_su0 M1 M1'} -> {wsnf M1'} ->
    exists M2', {mstep_su0 M2 M2'} /\ beta M1' M2'.
intros.
apply tm_step to _ H2.
apply clos_id to H1.
apply clos_id to H5.
apply mstep_su0_trans to H6 H3.
apply project_beta_clos to _ _ H2 H8 _.
apply conf_tm to _ H7 H9.
apply beta2wsnf to H10.
apply wsnf_step_eq to _ H12.
search.

