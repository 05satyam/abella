Specification "add".

Theorem add_base : forall N, {nat N} -> {add N z N}.
induction on 1. intros. case H1. search.
  apply IH to H2. search.

Theorem add_step : forall A B C, {add A B C} -> {add A (s B) (s C)}.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem add_s : forall A B C, {add A (s B) C} -> exists C', C = s C'.
intros. case H1. search. search.

Theorem add_inv_step : forall A B C, {add A (s B) (s C)} -> {add A B C}.
induction on 1. intros. case H1.
  search.
  apply add_s to H2. apply IH to H2. search.

Theorem add_twiddle : forall A B C, {add A (s B) C} -> {add (s A) B C}.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem add_comm : forall A B C, {nat B} -> {add A B C} -> {add B A C}.
induction on 2. intros. case H2.
  apply add_base to H1. search.
  apply IH to H1 H3. apply add_step to H4. search.

Theorem add_det : forall A B C D,
  {add A B C} -> {add A B D} -> C = D.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to H3 H4. search.

Theorem add_assoc : forall A B C AB BC ABC,
  {add A B AB} -> {add AB C ABC} -> {add B C BC} -> {add A BC ABC}.
induction on 1. intros. case H1.
  apply add_det to H2 H3. search.
  case H2. apply IH to H4 H5 H3. search.

Theorem add_exists : forall A B,
  {nat A} -> exists C, {add A B C}.
induction on 1. intros. case H1.
  search.
  apply IH to H2 with B = B. search.

Theorem add_isnat1 : forall A B C,
  {add A B C} -> {nat A}.
induction on 1. intros. case H1.
search.
apply IH to H2. search.

Theorem add_isnat2 : forall A B C,
  {add A B C} -> {nat B} -> {nat C}.
induction on 1. intros. case H1.
search.
apply IH to H3 H2. search.

Theorem add_isnat3 : forall A B C,
  {add A B C} -> {nat C} -> {nat B}.
induction on 1. intros. case H1.
search.
case H2. apply IH to H3 H4. search.

Theorem lesseq_isnat : forall N1 N2,
  {lesseq N1 N2} -> {nat N1}.
induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem add_imp_lesseq : forall A B C,
  {add A B C} -> {lesseq A C}.
induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem lesseq_absurd : forall N,
  {lesseq (s N) N} -> false.
induction on 1. intros. case H1. apply IH to H2.

Theorem lesseq_trans : forall A B C,
  {lesseq A B} -> {lesseq B C} -> {lesseq A C}.
induction on 1. intros. case H1.
search.
case H2. apply IH to H3 H4. search.

Theorem lesseq_refl : forall N,
  {nat N} -> {lesseq N N}.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem lesseq_step : forall N1 N2,
  {lesseq N1 N2} -> {lesseq N1 (s N2)}.
induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem lesseq_imp_add : forall N1 N2,
  {lesseq N1 N2} -> exists N, {add N1 N N2}.
induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem compare_nats : forall N1 N2,
  {nat N1} -> {nat N2} -> ({lesseq N1 N2} \/ {lesseq (s N2) N1}).
induction on 1. intros. case H1.
  left. search.
  case H2.
    right. search.
    apply IH to H3 H4. case H5. search. search.

Theorem compare_nats3 : forall N1 N2,
  {nat N1} -> {nat N2} -> (N1 = N2 \/ {lesseq (s N1) N2} \/ {lesseq (s N2) N1}).
induction on 1. intros. case H1.
  case H2.
    search.
    left. right. search.
  case H2.
    right. search.
    apply IH to H3 H4. case H5.
      search. search. search.

