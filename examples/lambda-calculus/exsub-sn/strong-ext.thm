Specification "strong-ext".

Import "strong-norm".

Define sn1 : nat -> tm -> prop by
  sn1 N M := forall C T M', {step1 C N T M M'} -> sn1 N M'.

Define sn1s : nat -> sub -> prop by
  sn1s N S := forall C T S', {step1s C N T S S'} -> sn1s N S'.

Define sn1_clo : nat -> tm -> prop by
  sn1_clo N M := forall T M', {step1 clo N T M M'} -> sn1_clo N M'.

Define sn1s_clo : nat -> sub -> prop by
  sn1s_clo N S := forall T S', {step1s clo N T S S'} -> sn1s_clo N S'.

Theorem step1_to_step_ext :
  (forall C T M1 M2, {step1 C z T M1 M2} -> {step T M1 M2}) /\
  (forall C T S1 S2, {step1s C z T S1 S2} -> {steps T S1 S2}).
induction on 1 1. split. intros. case H1.
  apply IH to H2. search.
  apply IH1 to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  search.
  search.
  search.
  search.
  search.
  search.
  search.
  search.
intros. case H1.
  apply IH to H2. search.
  apply IH1 to H2. search.
  search.
  apply IH1 to H2. search.
  apply IH1 to H2. search.
  search.
  search.
  search.
  search.
  search.

Split step1_to_step_ext as step1_to_step, step1s_to_steps.

Theorem step_to_step1_ext :
  (forall T M1 M2, {step T M1 M2} -> exists C, {step1 C z T M1 M2}) /\
  (forall T S1 S2, {steps T S1 S2} -> exists C, {step1s C z T S1 S2}).
induction on 1 1. split. intros. case H1.
  apply IH to H2. search.
  apply IH1 to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  search.
  search.
  search.
  search.
  search.
  search.
  search.
  search.
intros. case H1.
  apply IH to H2. search.
  apply IH1 to H2. search.
  search.
  apply IH1 to H2. search.
  apply IH1 to H2. search.
  search.
  search.
  search.
  search.
  search.

Split step_to_step1_ext as step_to_step1, steps_to_step1s.

Theorem step1_noc_N_ext :
  (forall N1 N2 T M1 M2, {step1 noc N1 T M1 M2} -> {step1 noc N2 T M1 M2}) /\
  (forall N1 N2 T S1 S2, {step1s noc N1 T S1 S2} -> {step1s noc N2 T S1 S2}).
induction on 1 1. split. intros. case H1.
  apply IH to H2 with N2 = N2. search.
  apply IH to H2 with N2 = N2. search.
  apply IH to H2 with N2 = N2. search.
  apply IH to H2 with N2 = N2. search.
  search. search. search.
  search. search. search.
  search. search.
intros. case H1.
  apply IH to H2 with N2 = N2. search.
  apply IH1 to H2 with N2 = N2. search.
  search.
  apply IH1 to H2 with N2 = N2. search.
  apply IH1 to H2 with N2 = N2. search.
  search. search. search.
  search. search.

Split step1_noc_N_ext as step1_noc_N, step1s_noc_N.

Theorem step1_noc_to_step : forall N T M1 M2, {step1 noc N T M1 M2} -> {step T M1 M2}.
intros. apply step1_noc_N to H1 with N2 = z. backchain step1_to_step.

Theorem step1s_noc_to_steps : forall N T S1 S2, {step1s noc N T S1 S2} -> {steps T S1 S2}.
intros. apply step1s_noc_N to H1 with N2 = z. backchain step1s_to_steps.

Theorem step1_su_N_ext :
  (forall N1 C M1 M2, {step1 C N1 su M1 M2} -> {step1 C z su M1 M2}) /\
  (forall N1 C S1 S2, {step1s C N1 su S1 S2} -> {step1s C z su S1 S2}).
induction on 1 1. split. intros. case H1.
  apply IH to H2. search.
  search.
  apply IH1 to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  search. search. search.
  search. search. search.
  search.
intros. case H1.
  apply IH to H2. search.
  apply IH1 to H2. search.
  search.
  apply IH1 to H2. search.
  apply IH1 to H2. search.
  search. search. search.
  search. search.

Split step1_su_N_ext as step1_su_N, step1s_su_N.

Theorem step1_su_to_step : forall C N M1 M2, {step1 C N su M1 M2} -> {step su M1 M2}.
intros. apply step1_su_N to H1. backchain step1_to_step.

Theorem step1s_su_to_steps : forall C N S1 S2, {step1s C N su S1 S2} -> {steps su S1 S2}.
intros. apply step1s_su_N to H1. backchain step1s_to_steps.

Theorem step1_inc_ext :
  (forall C N T M1 M2, {step1 C N T M1 M2} -> {step1 C (s N) T M1 M2}) /\
  (forall C N T S1 S2, {step1s C N T S1 S2} -> {step1s C (s N) T S1 S2}).
induction on 1 1. split. intros. case H1.
  apply IH to H2. search.
  search.
  apply IH1 to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  search.
  search.
  search.
  search.
  search.
  search.
  search.
  search.
intros. case H1.
  apply IH to H2. search.
  apply IH1 to H2. search.
  search.
  apply IH1 to H2. search.
  apply IH1 to H2. search.
  search.
  search.
  search.
  search.
  search.

Split step1_inc_ext as step1_inc, step1s_inc.

Theorem step1_inc_N : forall C N T M1 M2, {nat N} -> {step1 C z T M1 M2} -> {step1 C N T M1 M2}.
induction on 1. intros. case H1. search.
  apply IH to H3 H2. apply step1_inc to H4. search.

Theorem step1s_inc_N : forall C N T S1 S2, {nat N} -> {step1s C z T S1 S2} -> {step1s C N T S1 S2}.
induction on 1. intros. case H1. search.
  apply IH to H3 H2. apply step1s_inc to H4. search.

Theorem mstep_su0_to_mstep1 : forall M1 M2 N, {nat N} -> {mstep_su0 M1 M2} -> {mstep1 N M1 M2}.
induction on 2. intros. case H2.
  search.
  apply step_to_step1 to H3.
  apply IH to H1 H4.
  apply step1_inc_N to H1 H5.
  search.

Theorem msteps_su0_to_mstep1s : forall S1 S2 N, {nat N} -> {msteps_su0 S1 S2} -> {mstep1s N S1 S2}.
induction on 2. intros. case H2.
  search.
  apply steps_to_step1s to H3.
  apply IH to H1 H4.
  apply step1s_inc_N to H1 H5.
  search.

Theorem mstep0_to_mstep1 : forall M1 M2 N, {nat N} -> {mstep0 M1 M2} -> {mstep1 N M1 M2}.
induction on 2. intros. case H2.
  search.
  apply step_to_step1 to H3.
  apply IH to H1 H4.
  apply step1_inc_N to H1 H5.
  search.

Theorem msteps0_to_mstep1s : forall S1 S2 N, {nat N} -> {msteps0 S1 S2} -> {mstep1s N S1 S2}.
induction on 2. intros. case H2.
  search.
  apply steps_to_step1s to H3.
  apply IH to H1 H4.
  apply step1s_inc_N to H1 H5.
  search.

Theorem tm_step1_ext :
  (forall C N T M M', {tm M} -> {step1 C N T M M'} -> {tm M'}) /\
  (forall C N T S S', {sub S} -> {step1s C N T S S'} -> {sub S'}).
induction on 2 2. split. intros. case H2.
  case H1. apply IH to _ H3. search.
  case H1. apply IH1 to _ H3. search.
  case H1. apply IH1 to _ H3. search.
  case H1. apply IH to _ H3. search.
  case H1. apply IH to _ H3. search.
  case H1. apply IH to _ H3. search.
  case H1. case H3. search.
  search.
  case H1. case H4. search.
  case H1. case H3. case H4. case H5. search.
  case H1. case H5. apply add_isnat2 to H3 _. search.
  case H1. case H3. search.
  case H1. case H3. search.
  case H1. case H3. search 10.
intros. case H2.
  case H1. apply IH to _ H3. search.
  case H1. apply IH1 to _ H3. search.
  case H1. case H3. search.
  case H1. apply IH1 to _ H3. search.
  case H1. apply IH1 to _ H3. search.
  case H1. search.
  case H1. case H3. search.
  case H1. case H3. case H4. case H5. search.
  case H1. case H5. apply add_isnat2 to H3 _. search.
  case H1. case H3. search.

Split tm_step1_ext as tm_step1, sub_step1s.

Theorem tm_mstep1 : forall N M1 M2, {tm M1} -> {mstep1 N M1 M2} -> {tm M2}.
induction on 2. intros. case H2. search. apply tm_step1 to _ H3. apply IH to _ H4. search.

Theorem sub_mstep1s : forall N S1 S2, {sub S1} -> {mstep1s N S1 S2} -> {sub S2}.
induction on 2. intros. case H2. search. apply sub_step1s to _ H3. apply IH to _ H4. search.

Theorem of_step1_ext :
  (forall C N G T M M' A, {of G M A} -> {step1 C N T M M'} -> {of G M' A}) /\
  (forall C N G T S S' G', {ofs G S G'} -> {step1s C N T S S'} -> {ofs G S' G'}).
induction on 2 2. split.
  intros. case H2.
    case H1. apply IH to H5 H3. search.
    case H1. apply IH1 to H4 H3. search.
    case H1. apply IH1 to H4 H3. search.
    case H1. apply IH to H4 H3. search.
    case H1. apply IH to H5 H3. search.
    case H1. apply IH to H5 H3. search.
    case H1. case H3. search.
    case H1. case H4. search.
    case H1. case H3. case H4. search.
    case H1. case H3. case H4. search.
    case H1. apply ofs_sub to H4. case H6.
      apply add_comm to _ H3. apply lemma_of_var_shift to H8 H4 H5. search.
    case H1. case H4. search.
    case H1. case H4. search.
    case H1. case H4. search 10.
  intros. case H2.
    case H1. apply IH to H4 H3. search.
    case H1. apply IH1 to H5 H3. search.
    case H1.
      assert forall G K, {of G (var K) A} -> {ofs G (shift (s K)) G'1} ->
          {ofs G (shift K) (cons G'1 A)}.
        induction on 1. intros.
        case H5.
          case H6. case H7. search.
          case H6. apply IH2 to H7 H8. search.
      apply H5 to H3 H4. search.
    case H1. apply IH1 to H5 H3. search.
    case H1. apply IH1 to H4 H3. search.
    case H1. case H4. search.
    case H1. case H4. search.
    case H1. case H3. case H4. search.
    case H1. apply ofs_sub to H4. case H6.
      apply add_comm to _ H3. apply lemma_of_shift_shift to H8 H4 H5. search.
    case H1. case H4. search.

Split of_step1_ext as of_step1, ofs_step1s.

Theorem of_mstep1 : forall N G M M' A, {of G M A} -> {mstep1 N M M'} -> {of G M' A}.
induction on 2. intros. case H2. search. apply of_step1 to H1 H3. apply IH to H5 H4. search.

Theorem of_mstep1_clo : forall N G M M' A, {of G M A} -> {mstep1_clo N M M'} -> {of G M' A}.
induction on 2. intros. case H2. search. apply of_step1 to H1 H3. apply IH to H5 H4. search.

Theorem is_sn1_clo : forall N G M A,
  (forall G S G', {ctx G} -> {ofs G S G'} -> sn1s N S) ->
    {ctx G} -> {of G M A} -> sn1_clo (s N) M.
induction on 3. intros. case H3.
  % c
  unfold. intros. case H5.
  % z
  unfold. intros. case H4.
  % s N
  unfold. intros. case H5.
  % clos M S
  assert forall M S, sn1_clo (s N) M -> sn1s N S -> sn1_clo (s N) (clos M S).
    induction on 1. induction on 2. intros. unfold. intros. case H8.
      case H6. apply H10 to H9. backchain IH1.
      case H7. apply H10 to H9. backchain IH2.
  apply ofs_ctx to _ H4. apply IH to H1 _ H5. apply H1 to _ H4.
  backchain H6.
  % app M1 M2
  assert forall N M1 M2, sn1_clo N M1 -> sn1_clo N M2 -> sn1_clo N (app M1 M2).
    induction on 1. induction on 2. intros. unfold. intros. case H8.
      case H6. apply H10 to H9. backchain IH1.
      case H7. apply H10 to H9. backchain IH2.
  apply IH to H1 _ H4. apply IH to H1 _ H5. backchain H6.
  % lam M
  assert forall N M, sn1_clo N M -> sn1_clo N (lam M).
    induction on 1. intros. unfold. intros. case H7.
      case H6. apply H9 to H8. backchain IH1.
  apply IH to H1 _ H5. backchain H6.

Theorem is_sn1s_clo : forall N G S G',
  (forall G S G', {ctx G} -> {ofs G S G'} -> sn1s N S) ->
    {ctx G} -> {ofs G S G'} -> sn1s_clo (s N) S.
induction on 3. intros. case H3.
  % shift z
  unfold. intros. case H4.
  % shift (s N)
  unfold. intros. case H5.
  % dot M S
  assert forall N M S, sn1_clo N M -> sn1s_clo N S -> sn1s_clo N (dot M S).
    induction on 1. induction on 2. intros. unfold. intros. case H8.
      case H6. apply H10 to H9. backchain IH1.
      case H7. apply H10 to H9. backchain IH2.
  apply is_sn1_clo to H1 _ H4. apply IH to H1 _ H5. backchain H6.
  % comp S1 S2
  assert forall N S1 S2, sn1s_clo N S1 -> sn1s_clo N S2 -> sn1s_clo N (comp S1 S2).
    induction on 1. induction on 2. intros. unfold. intros. case H8.
      case H6. apply H10 to H9. backchain IH1.
      case H7. apply H10 to H9. backchain IH2.
  apply ofs_ctx to _ H4. apply IH to H1 _ H4. apply IH to H1 _ H5. backchain H6.

% cong lemmas mstep1_clo
Theorem mstep1_clo_cong_closl : forall N M M' S,
  {mstep1_clo N M M'} -> {mstep1_clo N (clos M S) (clos M' S)}.
induction on 1. intros. case H1. search.
apply IH to H3 with S = S. search.

Theorem mstep1_clo_cong_closr : forall N M S S',
  {mstep1s_clo N S S'} -> {mstep1_clo (s N) (clos M S) (clos M S')}.
induction on 1. intros. case H1. search.
apply IH to H3 with M = M. search.

Theorem mstep1_clo_cong_appl : forall N M1 M1' M2,
  {mstep1_clo N M1 M1'} -> {mstep1_clo N (app M1 M2) (app M1' M2)}.
induction on 1. intros. case H1. search.
apply IH to H3 with M2 = M2. search.

Theorem mstep1_clo_cong_appr : forall N M1 M2 M2',
  {mstep1_clo N M2 M2'} -> {mstep1_clo N (app M1 M2) (app M1 M2')}.
induction on 1. intros. case H1. search.
apply IH to H3 with M1 = M1. search.

Theorem mstep1_clo_cong_lam : forall N M M',
  {mstep1_clo N M M'} -> {mstep1_clo N (lam M) (lam M')}.
induction on 1. intros. case H1. search.
apply IH to H3. search.

Theorem mstep1s_clo_cong_dotl : forall N M M' S,
  {mstep1_clo N M M'} -> {mstep1s_clo N (dot M S) (dot M' S)}.
induction on 1. intros. case H1. search.
apply IH to H3 with S = S. search.

Theorem mstep1s_clo_cong_dotr : forall N M S S',
  {mstep1s_clo N S S'} -> {mstep1s_clo N (dot M S) (dot M S')}.
induction on 1. intros. case H1. search.
apply IH to H3 with M = M. search.

Theorem mstep1s_clo_cong_compl : forall N S1 S1' S2,
  {mstep1s_clo N S1 S1'} -> {mstep1s_clo N (comp S1 S2) (comp S1' S2)}.
induction on 1. intros. case H1. search.
apply IH to H3 with S2 = S2. search.

Theorem mstep1s_clo_cong_compr : forall N S1 S2 S2',
  {mstep1s_clo N S2 S2'} -> {mstep1s_clo N (comp S1 S2) (comp S1 S2')}.
induction on 1. intros. case H1. search.
apply IH to H3 with S1 = S1. search.

% cong lemmas mstep1
Theorem mstep1_cong_closl : forall N M M' S,
  {mstep1 N M M'} -> {mstep1 N (clos M S) (clos M' S)}.
induction on 1. intros. case H1. search.
apply IH to H3 with S = S. search.

Theorem mstep1_cong_closr : forall N M S S',
  {mstep1s N S S'} -> {mstep1 (s N) (clos M S) (clos M S')}.
induction on 1. intros. case H1. search.
apply IH to H3 with M = M. search.

Theorem mstep1_cong_appl : forall N M1 M1' M2,
  {mstep1 N M1 M1'} -> {mstep1 N (app M1 M2) (app M1' M2)}.
induction on 1. intros. case H1. search.
apply IH to H3 with M2 = M2. search.

Theorem mstep1_cong_appr : forall N M1 M2 M2',
  {mstep1 N M2 M2'} -> {mstep1 N (app M1 M2) (app M1 M2')}.
induction on 1. intros. case H1. search.
apply IH to H3 with M1 = M1. search.

Theorem mstep1_cong_lam : forall N M M',
  {mstep1 N M M'} -> {mstep1 N (lam M) (lam M')}.
induction on 1. intros. case H1. search.
apply IH to H3. search.

Theorem mstep1s_cong_dotl : forall N M M' S,
  {mstep1 N M M'} -> {mstep1s N (dot M S) (dot M' S)}.
induction on 1. intros. case H1. search.
apply IH to H3 with S = S. search.

Theorem mstep1s_cong_dotr : forall N M S S',
  {mstep1s N S S'} -> {mstep1s N (dot M S) (dot M S')}.
induction on 1. intros. case H1. search.
apply IH to H3 with M = M. search.

Theorem mstep1s_cong_compl : forall N S1 S1' S2,
  {mstep1s N S1 S1'} -> {mstep1s N (comp S1 S2) (comp S1' S2)}.
induction on 1. intros. case H1. search.
apply IH to H3 with S2 = S2. search.

Theorem mstep1s_cong_compr : forall N S1 S2 S2',
  {mstep1s N S2 S2'} -> {mstep1s N (comp S1 S2) (comp S1 S2')}.
induction on 1. intros. case H1. search.
apply IH to H3 with S1 = S1. search.

Theorem mstep1_clo_trans : forall N M1 M2 M3,
    {mstep1_clo N M1 M2} -> {mstep1_clo N M2 M3} -> {mstep1_clo N M1 M3}.
induction on 1. intros. case H1. search. apply IH to H4 H2. search.

Theorem mstep1_trans : forall N M1 M2 M3,
    {mstep1 N M1 M2} -> {mstep1 N M2 M3} -> {mstep1 N M1 M3}.
induction on 1. intros. case H1. search. apply IH to H4 H2. search.

Theorem mstep1s_trans : forall N S1 S2 S3,
    {mstep1s N S1 S2} -> {mstep1s N S2 S3} -> {mstep1s N S1 S3}.
induction on 1. intros. case H1. search. apply IH to H4 H2. search.

Theorem mstep1_clo_inc : forall N M1 M2, {mstep1_clo N M1 M2} -> {mstep1_clo (s N) M1 M2}.
induction on 1. intros. case H1.
  search.
  apply step1_inc to H2. apply IH to H3. search.

Theorem mstep1_inc : forall N M1 M2, {mstep1 N M1 M2} -> {mstep1 (s N) M1 M2}.
induction on 1. intros. case H1.
  search.
  apply step1_inc to H2. apply IH to H3. search.

Theorem mstep1s_inc : forall N S1 S2, {mstep1s N S1 S2} -> {mstep1s (s N) S1 S2}.
induction on 1. intros. case H1.
  search.
  apply step1s_inc to H2. apply IH to H3. search.

Theorem mstep1_clo_split_clos : forall N M M2 S2,
    {mstep1_clo (s N) M (clos M2 S2)} ->
      exists M1 S1, M = clos M1 S1 /\ {mstep1_clo (s N) M1 M2} /\ {mstep1s N S1 S2}.
induction on 1. intros. case H1.
  search.
  apply IH to H3. case H2.
    search.
    search.

Theorem mstep1_clo_split_app : forall N M M3 M4,
    {mstep1_clo N M (app M3 M4)} ->
      exists M1 M2, M = app M1 M2 /\ {mstep1_clo N M1 M3} /\ {mstep1_clo N M2 M4}.
induction on 1. intros. case H1.
  search.
  apply IH to H3. case H2.
    search.
    search.

Theorem mstep1_clo_split_lam : forall N M M2,
    {mstep1_clo N M (lam M2)} -> exists M1, M = lam M1 /\ {mstep1_clo N M1 M2}.
induction on 1. intros. case H1.
  search.
  apply IH to H3. case H2.
    search.

Theorem mstep1_clo_split_c : forall N M A, {mstep1_clo N M (c A)} -> M = c A.
induction on 1. intros. case H1.
  search.
  apply IH to H3. case H2.

Theorem mstep1_clo_split_var : forall N M N', {mstep1_clo N M (var N')} -> M = var N'.
induction on 1. intros. case H1.
  search.
  apply IH to H3. case H2.

Theorem step1_case_C : forall C N T M M', {step1 C N T M M'} -> C = clo \/ C = noc.
induction on 1. intros. case H1.
  apply IH to H2. search.
  search.
  search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  search. search. search. search.
  search. search. search. search.

Theorem step1s_case_C : forall C N T S S', {step1s C N T S S'} -> C = clo \/ C = noc.
induction on 1. intros. case H1.
  apply step1_case_C to H2. search.
  apply IH to H2. search.
  search.
  apply IH to H2. search.
  apply IH to H2. search.
  search. search. search. search.
  search.

Theorem wcomp_result : forall K S1 S2,
    {wcomp K S1 S2} -> (exists N, S2 = shift N) \/ (exists M S, S2 = dot M S).
induction on 1. intros. case H1.
  search.
  search.
  apply IH to H2. case H3. search. search.
  apply IH to H3. case H4. search. search.
  search.

Theorem wcomp_nat : forall N S1 S2, {wcomp N S1 S2} -> {nat N}.
induction on 1. intros. case H1.
  apply add_isnat1 to H2. search.
  search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.

Theorem msteps_su0_shift_shift : forall N1 N2 N3 S1 S2,
    {nat N2} -> {add N1 N2 N3} -> {msteps_su0 (comp (shift N3) S1) S2} -> 
      ((exists N, S2 = shift N) \/ (exists M S, S2 = dot M S)) ->
      {msteps_su0 (comp (shift N2) (comp (shift N1) S1)) S2}.
induction on 3. intros. case H3.
  case H4.
  case H5. % 5 sg
    case H7.
    apply IH to H1 H2 H6 H4. search.
    case H2. search.
    case H2.
      search.
      apply IH to H1 H7 H6 H4. search.
    case H6.
      apply add_comm to _ H2.
      apply add_exists to _ with A = N1, B = N5.
        apply add_isnat1 to H2. search.
      apply add_assoc to H8 H7 H9.
      search.
      case H8.

Theorem wcomp_to_msteps_su0 : forall N S1 S2,
    {sub S1} -> {wcomp N S1 S2} -> {msteps_su0 (comp (shift N) S1) S2}.
induction on 2. intros. case H2.
  search.
  search.
  case H1. apply IH to _ H3. search.
  % 4
  case H1.
  apply IH to _ H3.
  apply IH to _ H4.
  assert forall N S3, {sub S3} -> {msteps_su0 (comp (shift N) S3) (shift N2)} ->
      {msteps_su0 (comp (shift N2) S4) S2} -> {msteps_su0 (comp (shift N) (comp S3 S4)) S2}.
    induction on 2. intros. case H10. case H12. % 5 sg
      case H14.
      apply sub_step to _ H14. apply IH1 to _ H13 H11. search.
      apply msteps_su0_cong_compl to H13 with S2 = S4.
        apply msteps_su0_trans to H14 H11. search.
      case H9. apply IH1 to _ H13 H11. search.
      case H13.
        backchain msteps_su0_shift_shift.
          apply add_isnat1 to H14. search.
          case H9. backchain add_comm.
          backchain wcomp_result.
        case H15.
  apply H9 to _ H7 H8. search.
  % 5
  case H1.
  apply IH to _ H3.
  assert forall N S3, {msteps_su0 (comp (shift N) S3) (dot M S)} ->
      {msteps_su0 (comp (shift N) (comp S3 S4)) (dot (clos M S4) (comp S S4))}.
    induction on 1. intros. case H7. case H8. % 5 sg
      case H10.
      apply IH1 to H9. search.
      apply msteps_su0_cong_compl to H9 with S2 = S4.
        apply msteps_su0_trans to H10 _ with S3 = dot (clos M S4) (comp S S4). search.
      apply IH1 to H9. search.
      case H9. case H11.
  apply H7 to H6. search.

Theorem wcomp0_to_msteps_su0 : forall S1 S2,
    {sub S1} -> {wcomp z S1 S2} -> {msteps_su0 S1 S2}.
intros. apply wcomp_to_msteps_su0 to H1 H2.
assert forall S1, {msteps_su0 (comp (shift z) S1) S2} -> {msteps_su0 S1 S2}.
induction on 1. intros. case H4.
  apply wcomp_result to H2. case H5.
  case H5.
    case H7.
    apply IH to H6. search.
    search.
    case H7. search.
apply H4 to H3. search.

Theorem sub_wcomp : forall N S1 S2, {sub S1} -> {wcomp N S1 S2} -> {sub S2}.
intros. apply wcomp_to_msteps_su0 to _ H2.
  apply wcomp_nat to H2. apply sub_msteps_su0 to _ H3. search.

Theorem mstep1s_split_dot : forall N M1 S1 S,
    {mstep1s N (dot M1 S1) S} ->
      (exists M2 S2, S = dot M2 S2 /\ {mstep1 N M1 M2} /\ {mstep1s N S1 S2}) \/
      (exists K, S = shift K /\ {mstep1 N M1 (var K)} /\ {mstep1s N S1 (shift (s K))}).
induction on 1. intros. case H1.
  search.
  case H2.
    apply IH to H3. case H5. search. search.
    apply IH to H3. case H5. search. search.
    case H3.
      search.
      case H4.

Theorem wcomp_exists : forall K S1,
    {nat K} -> {sub S1} -> exists S2, {wcomp K S1 S2}.
induction on 2. intros. case H2.
  apply add_exists to H1 with B = N. search.
  case H1.
    search.
    apply IH to H5 H4. search.
  apply IH to H1 H3. apply wcomp_result to H5. case H6.
    % shift
    apply wcomp_to_msteps_su0 to _ H5.
    apply sub_msteps_su0 to _ H7.
    case H8.
    apply IH to H9 H4.
    search.
    % dot
    search.

Theorem lemma_comp_shift : forall K S1 S2,
    {msteps_su0 (comp (shift K) S1) S2} ->
      ((exists N, S2 = shift N) \/ (exists M S, S2 = dot M S)) ->
      {msteps_su0 (dot (clos (var K) S1) (comp (shift (s K)) S1)) S2}.
induction on 1. intros. case H1. case H2. case H3. % 5 sg
  case H5.
  apply IH to H4 H2. search.
  backchain msteps_su0_trans with S2 = dot (clos (var z) S2) (comp (shift (s z)) S5).
    backchain msteps_su0_cong_dotl. backchain mstep_su0_cong_closr.
    backchain msteps_su0_trans with S2 = dot (clos (var z) S2) (comp (shift (s z)) S2).
      backchain msteps_su0_cong_dotr. backchain msteps_su0_cong_compr.
      case H2.
        search.
        search.
  apply IH to H4 H2. search.
  search.

Theorem lemma_wcomp_shift : forall N K S1 S2,
    {nat N} -> {sub S1} -> {wcomp K S1 S2} ->
      {mstep1s N (dot (clos (var K) S1) (comp (shift (s K)) S1)) S2}.
intros. apply wcomp_to_msteps_su0 to _ H3.
apply wcomp_result to H3.
apply lemma_comp_shift to H4 H5.
apply msteps_su0_to_mstep1s to H1 H6.
search.

Theorem mstep1_clo_to_mstep1 : forall N M1 M2, {mstep1_clo N M1 M2} -> {mstep1 N M1 M2}.
induction on 1. intros. case H1. search. apply IH to H3. search.

Theorem mstep1s_clo_to_mstep1s : forall N S1 S2, {mstep1s_clo N S1 S2} -> {mstep1s N S1 S2}.
induction on 1. intros. case H1. search. apply IH to H3. search.

% This definition is simply a trick to allow the search-tactic to use
% congruence-rules and some transitivity in order to shorten the proofs.
% It is mostly used by invoking the backchain-tactic on one of the theorems
% mstep1_cong_search_apply or mstep1s_cong_search_apply below.
Define
    mstep1_cong_search : nat -> tm -> tm -> prop,
    mstep1s_cong_search : nat -> sub -> sub -> prop by
  mstep1_cong_search (s N) (clos M S) (clos M' S') :=
      mstep1_cong_search (s N) M M' /\ mstep1s_cong_search N S S' ;
  mstep1_cong_search N (app M1 M2) (app M1' M2') :=
      mstep1_cong_search N M1 M1' /\ mstep1_cong_search N M2 M2' ;
  mstep1_cong_search N (lam M) (lam M') := mstep1_cong_search N M M' ;
  mstep1_cong_search (s N) M M' := mstep1_cong_search N M M' ;
  mstep1_cong_search N M M' := {mstep1 N M M'} ;
  mstep1_cong_search N M M' := {mstep1_clo N M M'} ;
  mstep1s_cong_search N (dot M S) (dot M' S') :=
      mstep1_cong_search N M M' /\ mstep1s_cong_search N S S' ;
  mstep1s_cong_search N (comp S1 S2) (comp S1' S2') :=
      mstep1s_cong_search N S1 S1' /\ mstep1s_cong_search N S2 S2' ;
  mstep1s_cong_search (s N) S S' := mstep1s_cong_search N S S' ;
  mstep1s_cong_search N S S' := {mstep1s N S S'} ;
  mstep1s_cong_search N S S' := {mstep1s_clo N S S'}.

Theorem mstep1_cong_search_apply_ext :
    (forall N M M', mstep1_cong_search N M M' -> {mstep1 N M M'}) /\
    (forall N S S', mstep1s_cong_search N S S' -> {mstep1s N S S'}).
induction on 1 1. split. intros. case H1.
  apply IH to H2. apply IH1 to H3.
    backchain mstep1_trans with M2 = clos M'1 S.
      backchain mstep1_cong_closl.
      backchain mstep1_cong_closr.
  apply IH to H2. apply IH to H3.
    backchain mstep1_trans with M2 = app M1' M2.
      backchain mstep1_cong_appl.
      backchain mstep1_cong_appr.
  apply IH to H2.
    backchain mstep1_cong_lam.
  apply IH to H2.
    backchain mstep1_inc.
  search.
  backchain mstep1_clo_to_mstep1.
intros. case H1.
  apply IH to H2. apply IH1 to H3.
    backchain mstep1s_trans with S2 = dot M S'1.
      backchain mstep1s_cong_dotr.
      backchain mstep1s_cong_dotl.
  apply IH1 to H2. apply IH1 to H3.
    backchain mstep1s_trans with S2 = comp S1' S2.
      backchain mstep1s_cong_compl.
      backchain mstep1s_cong_compr.
  apply IH1 to H2.
    backchain mstep1s_inc.
  search.
  backchain mstep1s_clo_to_mstep1s.

Split mstep1_cong_search_apply_ext as mstep1_cong_search_apply, mstep1s_cong_search_apply.

Theorem commute_wcomp_step1 : forall K C N T S1 S2 S1',
    {nat K} -> {sub S1} -> {nat N} -> {step1s C N T S1 S2} -> {wcomp K S1 S1'} ->
      exists S2', {wcomp K S2 S2'} /\ {mstep1s (s N) S1' S2'}.
induction on 4. intros. case H4.
  case H5. apply step1_inc to H6. search. search.
  case H5.
    apply step1s_inc to H6. search.
    case H1. case H2. apply IH to _ _ H3 H6 H7. search.
  case H5.
    search.
    case H6. apply add_twiddle to H7. search.
  case H5.
    case H2. apply IH to _ _ H3 H6 H7. case H12. search. case H13.
    case H2. apply IH to _ _ H3 H6 H7. apply mstep1s_split_dot to H11. case H12.
      % dot
      exists dot (clos M2 S4) (comp S5 S4). split. search.
      backchain mstep1s_cong_search_apply.
      % shift
      assert {nat K1}.
        apply sub_wcomp to _ H7.
        apply sub_mstep1s to _ H11.
        case H16. search.
      apply wcomp_exists to H15 H9.
      exists S5. split. search.
      apply lemma_wcomp_shift to _ _ H16 with N = s N.
      backchain mstep1s_trans with S2 = dot (clos (var K1) S4) (comp (shift (s K1)) S4).
        backchain mstep1s_cong_search_apply.
  case H5.
    case H2. apply wcomp_nat to H8. apply IH to _ _ H3 H6 H8. search.
    apply step1s_inc to H6. search.
  case H5.
    case H6. apply add_comm to _ H8. case H9. search.
    case H6.
  case H5.
    case H6. search.
    case H6.
      search.
      search.
  case H5.
    case H6. case H7.
      case H8.
      apply add_inv_step to H8. search.
    case H6.
  case H5.
    case H7. case H8. apply add_assoc to H9 H10 H6. search.
    case H7.
  case H5.
    case H6. search.
    case H6.
      search.
      search.

Theorem commute_wcomp_mstep1 : forall K N S1 S2 S1',
    {nat K} -> {sub S1} -> {nat N} -> {mstep1s N S1 S2} -> {wcomp K S1 S1'} ->
      exists S2', {wcomp K S2 S2'} /\ {mstep1s (s N) S1' S2'}.
induction on 4. intros. case H4. search.
apply commute_wcomp_step1 to _ _ _ H6 H5.
apply sub_step1s to _ H6.
apply IH to _ _ _ H7 H8.
apply mstep1s_trans to H9 H12.
search.

Theorem mstep1s_split_dot2 : forall N S M2 S2,
    {nat N} -> {sub S} -> {mstep1s N S (dot M2 S2)} ->
      exists M1 S1, {msteps_su0 S (dot M1 S1)} /\ {mstep1 (s N) M1 M2} /\ {mstep1s (s N) S1 S2}.
intros. apply wcomp_exists to _ H2 with K = z.
apply commute_wcomp_mstep1 to _ _ _ H3 H4.
case H5.
apply wcomp_result to H4.
case H7. case H6. case H8.
apply wcomp0_to_msteps_su0 to _ H4.
apply mstep1s_split_dot to H6.
case H9.
search.

Theorem mstep1s_split_shift2 : forall N S K,
    {nat N} -> {sub S} -> {mstep1s N S (shift K)} ->
      {msteps_su0 S (shift K)} \/
      (exists M1 S1, {msteps_su0 S (dot M1 S1)} /\
        {mstep1 (s N) M1 (var K)} /\ {mstep1s (s N) S1 (shift (s K))}).
intros. apply wcomp_exists to _ H2 with K = z.
apply commute_wcomp_mstep1 to _ _ _ H3 H4.
case H5. case H7.
apply wcomp_result to H4.
apply wcomp0_to_msteps_su0 to _ H4.
case H8.
  % shift
  left. case H6. search. case H10.
  % dot
  right. apply mstep1s_split_dot to H6.
  case H10.
  search.

Theorem commute_clo_noc : forall M1 M2 M3 N T,
    {nat N} -> {tm M1} -> {mstep1_clo (s N) M1 M2} -> {step1 noc z T M2 M3} ->
      exists M, {mstep M1 M} /\ {mstep1 (s (s N)) M M3}.
induction on 4. intros. case H4.
  % clos
  apply mstep1_clo_split_clos to H3.
  apply IH to _ _ H6 H5.
    case H2. search.
  apply mstep_cong_closl to H8 with S = S1.
  exists clos M5 S1. split. search.
  backchain mstep1_cong_search_apply.
  % appl
  apply mstep1_clo_split_app to H3.
  apply IH to _ _ H6 H5.
    case H2. search.
  apply mstep_cong_appl to H8 with N = M7.
  exists app M M7. split. search.
  backchain mstep1_cong_search_apply.
  % appr
  apply mstep1_clo_split_app to H3.
  apply IH to _ _ H7 H5.
    case H2. search.
  apply mstep_cong_appr to H8 with M = M6.
  exists app M6 M. split. search.
  backchain mstep1_cong_search_apply.
  % lam
  apply mstep1_clo_split_lam to H3.
  apply IH to _ _ H6 H5.
    case H2. search.
  apply mstep_cong_lam to H7.
  apply mstep1_cong_lam to H8.
  search.
  % app (lam M1) M2
  apply mstep1_clo_split_app to H3.
  apply mstep1_clo_split_lam to H5.
  exists clos M8 (dot M7 (shift z)). split. search.
  backchain mstep1_cong_search_apply.
  % clos (c A) S
  apply mstep1_clo_split_clos to H3.
  apply mstep1_clo_split_c to H5.
  search.
  % clos (var z) (dot M3 S)
  apply mstep1_clo_split_clos to H3.
  apply mstep1_clo_split_var to H5.
  apply mstep1s_split_dot2 to _ _ H6.
    case H2. search.
  exists M5. split.
    case H7. search.
      apply mstep0_cong_closr to H11 with M = var z.
      apply mstep0_trans to H12 _ with M3 = M5.
      search.
    apply mstep1_inc to H8. search.
  % clos (var (s N)) (dot M S)
  apply mstep1_clo_split_clos to H3.
  apply mstep1_clo_split_var to H5.
  apply mstep1s_split_dot2 to _ _ H6.
    case H2. search.
  exists clos (var N2) S2. split.
    case H7. search.
      apply mstep0_cong_closr to H11 with M = var (s N2).
      apply mstep0_trans to H12 _ with M3 = clos (var N2) S2.
      search.
    apply mstep1_cong_closr to H9 with M = var N2.
    search.
  % clos (var N1) (shift N2)
  apply mstep1_clo_split_clos to H3.
  apply mstep1_clo_split_var to H6.
  case H2.
  apply mstep1s_split_shift2 to _ _ H7.
  case H10.
    % shift
    exists var N4. case H11. search.
    apply mstep0_cong_closr to H13 with M = var N2.
    apply mstep0_trans to H14 _ with M3 = var N4.
    search.
    % dot
    case H8. case H14.
      % z
      case H5.
      exists M5. split.
        case H11. search.
          apply mstep0_cong_closr to H16 with M = var z.
          apply mstep0_trans to H17 _ with M3 = M5.
          search.
        backchain mstep1_inc.
      % s
      exists clos (var N1) S2. split.
        case H11. search.
          apply mstep0_cong_closr to H17 with M = var (s N1).
          apply mstep0_trans to H18 _ with M3 = clos (var N1) S2.
          search.
        apply mstep1_cong_closr to H13 with M = var N1.
        case H5.
        apply add_step to H17.
        apply mstep1_trans to H16 _ with M3 = var (s N7).
        search.
  % clos (clos M S1) S2
  apply mstep1_clo_split_clos to H3.
  apply mstep1_clo_split_clos to H5.
  exists clos M5 (comp S4 S3). split. search.
  backchain mstep1_cong_search_apply.
  % clos (app M1 M2) S
  apply mstep1_clo_split_clos to H3.
  apply mstep1_clo_split_app to H5.
  exists app (clos M7 S1) (clos M8 S1). split. search.
  backchain mstep1_cong_search_apply.
  % clos (lam M) S
  apply mstep1_clo_split_clos to H3.
  apply mstep1_clo_split_lam to H5.
  exists lam (clos M5 (dot (var z) (comp S1 (shift (s z))))). split. search.
  backchain mstep1_cong_search_apply.
    search 10.

Theorem mstep1_split_clo_noc : forall N M1 M2,
    {mstep1 N M1 M2} -> {mstep1_clo N M1 M2} \/
      (exists T M1' M2', {mstep1_clo N M1 M1'} /\ {step1 noc z T M1' M2'} /\ {mstep1 N M2' M2}).
induction on 1. intros. case H1.
  left. search.
  apply step1_case_C to H2. case H4.
    apply IH to H3. case H5.
      left. search.
      right. search.
    right. apply step1_noc_N to H2 with N2 = z. search.

Theorem commute_clo_noc2 : forall M1 M2 M3 N T,
    {nat N} -> {tm M1} -> sn M1 -> {mstep1_clo (s N) M1 M2} -> {step1 noc z T M2 M3} ->
      exists M N', {mstep M1 M} /\ {nat N'} /\ {mstep1_clo (s N') M M3}.
assert forall M1 M2 M N,
    {nat N} -> {tm M1} -> sn M1 -> {mstep0 M1 M2} -> {mstep1 (s N) M2 M} ->
      exists M3 N', {mstep0 M2 M3} /\ {nat N'} /\ {mstep1_clo (s N') M3 M}.
  induction on 3. intros. case H4.
    apply mstep1_split_clo_noc to H5. case H6.
      search.
      apply commute_clo_noc to _ _ H7 H8.
        apply mstep1_inc to H9.
        apply mstep1_trans to H11 H12.
        case H10.
        case H3.
        apply H16 to H14.
        apply tm_step to _ H14.
        apply IH to _ _ H17 H15 H13.
        apply mstep0_trans to H15 H19.
        search.
    case H3.
      apply H8 to H6.
      apply tm_step to _ H6.
      apply IH to _ _ H9 H7 H5.
      search.
intros.
apply commute_clo_noc to _ _ H5 H6.
case H7.
case H4.
apply H11 to H9.
apply tm_step to _ H9.
apply H1 to _ _ H12 H10 H8.
apply mstep0_trans to H10 H14.
search.

Theorem mstep1_clo_inc_N : forall N1 N2 N3 M1 M2,
    {add N1 N2 N3} -> {nat N2} -> {mstep1_clo N1 M1 M2} -> {mstep1_clo N3 M1 M2}.
induction on 2. intros. case H2.
  apply add_comm to _ H1. case H4. search.
  apply add_twiddle to H1.
    apply mstep1_clo_inc to H3.
    apply IH to H5 H4 H6.
    search.

Theorem mstep1_clo_trans_N : forall N1 N2 M1 M2 M3,
    {nat N1} -> {nat N2} -> {mstep1_clo N1 M1 M2} -> {mstep1_clo N2 M2 M3} ->
      exists N3, {nat N3} /\ {mstep1_clo (s N3) M1 M3}.
intros. apply compare_nats to H1 H2. case H5.
  apply lesseq_imp_add to H6.
    apply add_isnat3 to H7 _.
    apply mstep1_clo_inc_N to H7 _ H3.
    apply mstep1_clo_trans to H9 H4.
    apply mstep1_clo_inc to H10.
    search.
  apply lesseq_imp_add to H6.
    apply add_isnat3 to H7 _.
    apply mstep1_clo_inc to H4.
    apply mstep1_clo_inc_N to H7 _ H9.
    apply mstep1_clo_trans to H3 H10.
    apply mstep1_clo_inc to H11.
    search.

Theorem is_sn1 : forall G A M1 M2 M3 N1 N2,
    {nat N1} -> {nat N2} -> {ctx G} -> {of G M1 A} -> sn M1 -> {mstep0 M1 M2} ->
      {mstep1_clo (s N1) M2 M3} -> sn1_clo N2 M3 ->
        (forall G M A, {ctx G} -> {of G M A} -> sn1_clo N2 M) ->
          sn1 N2 M3.
induction on 5. induction on 8. intros. case H6.
  unfold. intros. apply step1_case_C to H10. case H11.
    % clo
    case H8. apply H12 to H10.
    apply mstep1_clo_trans_N to _ _ H7 _ with M3 = M'.
    apply IH1 to _ _ _ _ H5 _ H15 H13 _.
    search.
    % noc
    apply step1_noc_N to H10 with N2 = z.
    apply commute_clo_noc2 to _ _ H5 H7 H12.
      apply of_tm to H4. search.
    case H13. case H5.
    apply H18 to H16.
    apply of_step to H4 H16.
    apply of_mstep1_clo to H4 H7.
    apply of_step1 to H21 H12.
    apply H9 to _ H22.
    apply IH to _ _ _ H20 H19 H17 H15 _ H9.
    search.
  apply of_step to H4 H10.
    case H5.
    apply H13 to H10.
    apply IH to _ _ _ H12 H14 H11 H7 H8 H9.
    search.

Theorem strong_tm_0 : forall M, sn M -> sn1 z M.
induction on 1. intros. unfold. intros.
apply step1_to_step to H2.
case H1.
apply H4 to H3.
apply IH to H5. search.

Theorem strong_sub_0 : forall S, sns S -> sn1s z S.
induction on 1. intros. unfold. intros.
apply step1s_to_steps to H2.
case H1.
apply H4 to H3.
apply IH to H5. search.

Theorem sn1s_dot : forall N M S,
  sn1 N M -> sn1s N S -> sn1s N (dot M S).
induction on 1. induction on 2. intros. unfold. intros.
case H3.
  case H1. apply H5 to H4. backchain IH.
  case H2. apply H5 to H4. backchain IH1.
  unfold. intros. case H4.

Theorem sn1s_dot_inv : forall N M S2, sn1s N (dot M S2) -> sn1 N M /\ sn1s N S2.
induction on 1. intros. case H1. split.
unfold. intros.
  assert {step1s C N T (dot M S2) (dot M' S2)}. apply H2 to H4. apply IH to H5. search.
unfold. intros.
  assert {step1s C N T (dot M S2) (dot M S')}. apply H2 to H4. apply IH to H5. search.

Define sn1s_ext : nat -> sub -> prop,
    sn1s_struct : nat -> sub -> prop by
  sn1s_ext N S := sn1s_struct N S /\ forall C T S', {step1s C N T S S'} -> sn1s_ext N S' ;
  sn1s_struct N (shift K) ;
  sn1s_struct N (comp S1 S2) := sn1s_ext N S1 /\ sn1s_ext N S2 ;
  sn1s_struct N (dot M S) := sn1 N M /\ sn1s_ext N S.

Theorem subsub_step1 : forall C N T S1 S2 S1',
  subsub S1 S2 -> {step1s C N T S1 S1'} -> exists S2', subsub S1' S2' /\ {step1s C N T S2 S2'}.
induction on 1. intros. case H1.
  search.
  apply IH to H3 H2. search.
  apply IH to H3 H2. search.
  apply IH to H3 H2. search.

Theorem sn1s2sn1s_ext_sub : forall N S1 S2,
  {sub S1} -> subsub S1 S2 -> sn1s N S2 ->
    (forall C T S', {step1s C N T S1 S'} -> sn1s_ext N S') /\ sn1s_struct N S1.
induction on 3. induction on 1. intros. split*.
  intros. apply subsub_step1 to H2 H4. case H3.
    apply H7 to H6. apply sub_step1s to H1 H4. apply IH to H9 H5 H8. search.
  case H1.
    search.
    unfold.
      unfold. intros. apply H4 to _.     
        case H8. case H9. search.
      apply subsub_join to _ H2 with S1 = S.
        apply IH1 to H6 H7 H3. search.
    unfold.
      apply subsub_join to _ H2 with S1 = S3.
        apply IH1 to H5 H7 H3. search.
      apply subsub_join to _ H2 with S1 = S4.
        apply IH1 to H6 H7 H3. search.

Theorem sn1s2sn1s_ext : forall N S, {sub S} -> sn1s N S -> sn1s_ext N S.
intros. apply sn1s2sn1s_ext_sub to H1 _ H2. search.

Theorem sn1s_comp_shift : forall N K S, {nat K} -> sn1s N S -> sn1s N (comp (shift K) S).
induction on 1. induction on 2. intros. unfold. intros. case H3.
  case H4.
  case H2. apply H5 to H4. backchain IH1.
  search.
  case H1. apply sn1s_dot_inv to H2. backchain IH.
  unfold. intros. case H5.

Theorem sn1s_comp : forall N S1 S2 G1 G2 G3,
  {ctx G1} -> sn1s_ext N S1 -> {ofs G3 S1 G2} -> sn1s N S2 -> {ofs G1 S2 G3} ->
    (forall G M A, {ctx G} -> {of G M A} -> sn1 N M) ->
      sn1s N (comp S1 S2).
induction on 2. induction on 4. intros. unfold. intros. case H7.
  case H2. apply H10 to H8. apply ofs_step1s to H3 H8. backchain IH.
  case H4. apply H9 to H8. apply ofs_step1s to _ H8. backchain IH1.
  search.
  case H2. case H3. case H8.
    apply IH to _ H13 H11 H4 _ _. backchain sn1s_dot. backchain H6.
  apply sn1s_dot_inv to H4. case H3. backchain sn1s_comp_shift.
    apply ofs_sub to H10. case H11. search.
  unfold. intros. case H9.
  case H2. case H3. case H8.
    apply IH to _ H13 H10 H4 _ _. apply IH to _ H12 H11 H14 _ _. search.

Theorem strong_N : forall N, {nat N} ->
    (forall G M A, {ctx G} -> {of G M A} -> sn1 N M) /\
    (forall G S G', {ctx G} -> {ofs G S G'} -> sn1s N S).
induction on 1. intros. case H1.
  split.
    intros. apply strong_tm to H2 H3. backchain strong_tm_0.
    intros. apply strong_sub to H2 H3. backchain strong_sub_0.
  apply IH to H2. split*.
    intros.
      apply is_sn1_clo to H4 H5 H6.
      apply strong_tm to H5 H6.
      apply is_sn1 to _ _ _ H6 H8 _ _ H7 _ with N1 = z, M2 = M.
        intros. apply is_sn1_clo to H4 H9 H10. search.
      search.
    induction on 2. intros. case H7.
      % shift z
      unfold. intros.
      case H8.
      % shift (s N)
      unfold. intros.
      case H9.
      % dot
      apply H5 to _ H8.
      apply IH1 to _ H9.
      backchain sn1s_dot.
      % comp
      apply ofs_ctx to _ H8.
      apply IH1 to _ H8.
      apply IH1 to _ H9.
      backchain sn1s_comp.
      backchain sn1s2sn1s_ext.
      backchain ofs_sub.

