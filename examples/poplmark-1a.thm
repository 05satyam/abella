%% Reflexivity and transitivity for Fsub, ie POPLmark Challenge 1a

Def nabla x, name x.

% ctx defines the context in which subtyping judgements are made
Def ctx nil.
Def ctx (bound X U :: L) :- name X, ctx L.

% cty defines valid closed types (used for reflexivity)
Def cty L top.
Def cty L X :- member (bound X U) L.
Def cty L (arrow T1 T2) :- cty L T1, cty L T2.
Def cty L (all T1 T2) :-
  cty L T1, (nabla x, cty (bound x T1 :: L) (T2 x)).

% ty defines valid open types (used for transitivity)
Def ty top.
Def nabla x, ty x.
Def ty (arrow T1 T2) :- ty T1, ty T2.
Def ty (all T1 T2) :- ty T1, (nabla x, ty (T2 x)).
  
Theorem sub_refl : forall L T,
  cty L T -> {L |- sub T T}.
induction on 1. intros. case H1.
  search.
  search.
  apply IH to H2. apply IH to H3. search.
  apply IH to H2. case H3. apply IH to H5. search.

Theorem ctx_no_sub : forall S T L,
  ctx L -> member (sub S T) L -> false.
induction on 1. intros. case H1.
  case H2.
  case H2.
    apply IH to H4 H5. search.

Theorem ctx_name : forall L X U,
  ctx L -> member (bound X U) L -> name X.
induction on 1. intros. case H1.
  case H2.
  case H2.
    case H3. search.
    apply IH to H4 H5. search.

Theorem bound_name : forall L X U,
  ctx L -> {L |- bound X U} -> name X.
intros. case H2. apply ctx_name to H1 H3. search.

Theorem sub_top : forall L T,
  ctx L -> {L |- sub top T} -> T = top.
intros. case H2.
  apply ctx_no_sub to H1 H3. case H4.
  search.
  search.
  apply bound_name to H1 H3. case H5.

Theorem dual_theorem : forall Q, ty Q ->
  (forall L S T, ctx L ->
    {L |- sub S Q} -> {L |- sub Q T} -> {L |- sub S T})
  /\
  (forall L P X TM TN,
    ctx (bound X Q :: L) -> {L |- sub P Q} ->
      {L, bound X Q |- sub TM TN} -> {L, bound X P |- sub TM TN}).
induction on 1. intros. split.

  % Proof of transitivity
  induction on 2. intros. case H3.
    apply ctx_no_sub to H2 H5. case H6.
    apply sub_top to H2 H4. case H5. search.
    search.
    apply IH' to H2 H6 H4. search.
    case H4.
      apply ctx_no_sub to H2 H7. case H8.
      search.
      apply bound_name to H2 H7. case H8.
      apply bound_name to H2 H7. case H9.
      case H1. apply IH to H9. case H11.
        apply IH to H10. case H14.
          apply H12 to H2 H7 H5.
            apply H15 to H2 H6 H8.
              search.
    case H4.
      apply ctx_no_sub to H2 H7. case H8.
      search.
      apply bound_name to H2 H7. case H8.
      apply bound_name to H2 H7. case H9.
      case H1. apply IH to H9. case H11.
        case H10. apply IH to H14. case H15.
          apply H12 to H2 H7 H5.
            assert ctx (bound n1 T1 :: L). search.
              apply H13 to H19 H7 H6.
                apply H16 to _ H20 H8.
                  search.

  % Proof of narrowing
  induction on 3. intros. case H5.
    apply ctx_no_sub to H3 H6. case H7.
    search.
    case H6. case H7.
      search.
      search.
    case H6. case H8.
      apply IH' to H3 H4 H7.
        case H3.
          apply H2 to _ H4 H9. search.
    apply IH' to H3 H4 H7. search.
    apply IH' to H3 H4 H6. apply IH' to H3 H4 H7. search.
    apply IH' to H3 H4 H6.
      assert ctx (bound X Q :: bound n1 T1 :: L). case H3. search.
      apply IH' to H9 H4 H7.
      search.

Theorem transitivity : forall L Q S T,
  ctx L -> ty Q -> {L |- sub S Q} -> {L |- sub Q T} -> {L |- sub S T}.
intros. apply dual_theorem to H2. case H5.
  apply H6 to H1 H3 H4. search.
