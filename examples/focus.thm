%% All logics have the same structure for contexts

Define ctx nil.
Define ctx (hyp B :: L) := {form B} /\ ctx L.

Theorem ctx_member : forall E L,
  ctx L -> member E L -> exists B, E = hyp B /\ {form B}.
induction on 1. intros. case H1.
  case H2.
  case H2.
    search.
    apply IH to H4 H5. search.

Theorem form_ignores_ctx : forall B L,
  ctx L -> {L |- form B} -> {form B}.
induction on 2. intros. case H2.
  apply ctx_member to H1 H3.
  search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  

%% The focused system is sound

% This requires mutual induction
Theorem sound :
  (forall L A B, ctx L -> {L |- focus B A} -> {L, hyp B |- conc (atom A)}) /\
  (forall L B, ctx L -> {L |- unfocus B} -> {L |- conc B}).
induction on 2 2. split.

  % focus -> conc
  intros. case H2.
    apply ctx_member to H1 H3.
    search.
    apply IH1 to _ H3. apply IH to H1 H4. search.

  % unfocus -> conc
  intros. case H2.
    apply ctx_member to H1 H3.
    apply form_ignores_ctx to H1 H3. apply IH1 to _ H4. search.
    apply IH to H1 H4. cut H5 with H3. search.

Theorem sound_focus : forall L A B,
  ctx L -> {L |- focus B A} -> {L, hyp B |- conc (atom A)}.
apply sound. search.

Theorem sound_unfocus : forall L B,
  ctx L -> {L |- unfocus B} -> {L |- conc B}.
apply sound. search.


%% The full logic can be restricted to initial cuts

Theorem init_form : forall L B,
  {form B} -> member (hyp B) L -> {L |- conc-i B}.
induction on 1. intros. case H1.
  search.
  apply IH to H3 _ with L = hyp B1 :: L.
    apply IH to H4 _ with L = hyp C :: L.
      search.

Theorem restrict_init : forall L B,
  ctx L -> {L |- conc B} -> {L |- conc-i B}.
induction on 2. intros. case H2.
  apply ctx_member to H1 H3.
  case H3. apply ctx_member to H1 H4.
  apply init_form to H5 H4. search.
  apply form_ignores_ctx to H1 H3. apply IH to _ H4. search.
  case H3. apply ctx_member to H1 H6. case H7.
    apply IH to H1 H4. apply IH to _ H5. search.
