Define ctx nil.
Define ctx (hyp B :: L) := ctx L.

Theorem ctx_member : forall E L,
  ctx L -> member E L -> exists B, E = hyp B.
induction on 1. intros. case H1.
  case H2.
  case H2.
    search.
    apply IH to H3 H4. search.

% This requires mutual induction
Theorem sound :
  (forall L A B, ctx L -> {L |- focus B A} -> {L, hyp B |- conc (atom A)}) /\
  (forall L B, ctx L -> {L |- unfocus B} -> {L |- conc B}).
induction on 2 2. split.

  % focus -> conc
  intros. case H2.
    apply ctx_member to H1 H3.
    search.
    apply IH1 to _ H3. apply IH to _ H4. search.

  % unfocus -> conc
  intros. case H2.
    apply ctx_member to H1 H3.
    apply IH1 to _ H3. search.
    apply IH to H1 H4. cut H5 with H3. search.

Theorem sound_focus : forall L A B,
  ctx L -> {L |- focus B A} -> {L, hyp B |- conc (atom A)}.
apply sound. search.

Theorem sound_unfocus : forall L B,
  ctx L -> {L |- unfocus B} -> {L |- conc B}.
apply sound. search.
